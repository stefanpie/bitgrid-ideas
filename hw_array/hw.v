/* Generated by Yosys 0.43 (git sha1 ead4718e5, clang++ 15.0.0 -fPIC -Os) */

(* top =  1  *)
(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:186" *)
(* generator = "Amaranth" *)
module top(global_program_enable, global_run_rst, global_run_enable, global_program_mem_rst, global_program_mem_enable, global_program_mem_in, global_state_mem_copy, global_state_mem_rst, global_state_mem_enable, clk, rst, global_state_mem_out, global_program_rst);
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1175 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1180 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1185 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1190 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1195 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1200 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1206 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1211 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1215 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1219 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1223 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1227 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1231 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1235 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1240 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1245 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1249 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1253 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1257 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1261 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1265 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1269 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1274 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1279 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1283 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1287 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1291 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1295 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1299 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1303 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1308 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1313 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1317 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1321 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1325 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1329 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1333 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1337 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1342 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1347 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1351 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1355 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1359 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1363 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1367 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1371 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1376 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1381 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1385 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1389 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1393 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1397 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1401 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1405 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1410 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1416 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1421 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1426 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1431 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1436 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1441 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1446 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  wire \data_copy$1452 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1455 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1457 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1459 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1461 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1463 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1465 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1467 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1469 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1471 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1473 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1475 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1477 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1479 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1481 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1483 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1485 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1487 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1489 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1491 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1493 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1495 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1497 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1499 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1501 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1503 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1505 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1507 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1509 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1511 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1513 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1515 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1517 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1519 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1521 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1523 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1525 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1527 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1529 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1531 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1533 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1535 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1537 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1539 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1541 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1543 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1545 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1547 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1549 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1551 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1553 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1555 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1557 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1559 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1561 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1563 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1565 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1567 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1569 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1571 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1573 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1575 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1577 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1579 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1581 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1583 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1585 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1587 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1589 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1591 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1593 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1595 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1597 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1599 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1601 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1603 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1605 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1607 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1609 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1611 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1613 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1615 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1617 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1619 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1621 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1623 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1625 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1627 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1629 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1631 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1633 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1635 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1637 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1639 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1641 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1643 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1645 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1647 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1649 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1651 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1653 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1655 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1657 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1659 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1661 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1663 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1665 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1667 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1669 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1671 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1673 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1675 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1677 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1679 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1681 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1683 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1685 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1687 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1689 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1691 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1693 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1695 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1697 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1699 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1701 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire \data_in$1703 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  wire \data_in$1705 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1456 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1458 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1460 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1462 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1464 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1466 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1468 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1470 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1472 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1474 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1476 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1478 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1480 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1482 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1484 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1486 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1488 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1490 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1492 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1494 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1496 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1498 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1500 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1502 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1504 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1506 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1508 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1510 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1512 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1514 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1516 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1518 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1520 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1522 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1524 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1526 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1528 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1530 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1532 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1534 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1536 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1538 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1540 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1542 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1544 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1546 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1548 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1550 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1552 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1554 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1556 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1558 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1560 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1562 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1564 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1566 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1568 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1570 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1572 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1574 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1576 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1578 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1580 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1582 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1584 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1586 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1588 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1590 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1592 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1594 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1596 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1598 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1600 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1602 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1604 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1606 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1608 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1610 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1612 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1614 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1616 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1618 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1620 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1622 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1624 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1626 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1628 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1630 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1632 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1634 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1636 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1638 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1640 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1642 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1644 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1646 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1648 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1650 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1652 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1654 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1656 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1658 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1660 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1662 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1664 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1666 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1668 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1670 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1672 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1674 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1676 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1678 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1680 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1682 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1684 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1686 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1688 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1690 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1692 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1694 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1696 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1698 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1700 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire \data_out$1702 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire \data_out$1704 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1005 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1012 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1019 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1026 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1033 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1040 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1047 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1054 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1061 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1068 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1075 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1082 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1089 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1096 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1103 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1110 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1117 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1124 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1131 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1138 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1145 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1152 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$1159 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1165 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1171 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1176 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1181 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1186 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1191 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1196 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1201 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1207 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1212 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1216 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1220 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1224 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1228 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1232 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1236 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1241 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1246 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1250 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1254 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1258 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1262 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1266 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1270 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1275 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1280 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1284 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1288 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1292 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1296 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1300 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1304 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1309 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1314 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1318 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1322 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1326 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1330 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1334 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1338 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1343 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1348 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1352 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1356 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1360 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1364 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1368 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1372 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1377 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1382 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1386 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1390 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1394 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1398 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1402 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1406 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1411 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1417 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1422 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1427 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1432 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1437 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1442 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  wire [3:0] \data_parallel$1447 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$725 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$732 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$739 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$746 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$753 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$760 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$767 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$774 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$781 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$788 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$795 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$802 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$809 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$816 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$823 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$830 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$837 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$844 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$851 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$858 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$865 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$872 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$879 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$886 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$893 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$900 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$907 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$914 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$921 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$928 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$935 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$942 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$949 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$956 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$963 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$970 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$977 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$984 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$991 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] \data_parallel$998 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1003 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1010 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1017 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1024 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1031 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1038 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1045 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1052 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1059 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1066 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1073 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1080 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1087 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1094 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1101 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1108 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1115 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1122 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1129 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1136 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1143 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1150 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1157 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$1164 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1169 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1174 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1179 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1184 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1189 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1194 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1199 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1205 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1210 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1214 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1218 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1222 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1226 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1230 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1234 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1239 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1244 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1248 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1252 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1256 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1260 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1264 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1268 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1273 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1278 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1282 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1286 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1290 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1294 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1298 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1302 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1307 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1312 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1316 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1320 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1324 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1328 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1332 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1336 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1341 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1346 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1350 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1354 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1358 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1362 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1366 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1370 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1375 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1380 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1384 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1388 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1392 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1396 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1400 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1404 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1409 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1415 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1420 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1425 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1430 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1435 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1440 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1445 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  wire \enable$1451 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$730 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$737 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$744 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$751 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$758 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$765 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$772 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$779 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$786 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$793 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$800 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$807 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$814 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$821 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$828 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$835 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$842 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$849 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$856 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$863 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$870 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$877 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$884 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$891 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$898 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$905 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$912 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$919 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$926 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$933 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$940 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$947 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$954 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$961 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$968 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$975 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$982 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$989 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  wire \enable$996 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input global_program_enable;
  wire global_program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input global_program_mem_enable;
  wire global_program_mem_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input global_program_mem_in;
  wire global_program_mem_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input global_program_mem_rst;
  wire global_program_mem_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input global_program_rst;
  wire global_program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input global_run_enable;
  wire global_run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input global_run_rst;
  wire global_run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input global_state_mem_copy;
  wire global_state_mem_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input global_state_mem_enable;
  wire global_state_mem_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output global_state_mem_out;
  wire global_state_mem_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input global_state_mem_rst;
  wire global_state_mem_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$105 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$113 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$119 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$125 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$133 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$141 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$149 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$157 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$165 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$17 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$173 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$179 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$185 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$193 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$201 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$209 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$217 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$225 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$23 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$233 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$239 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$245 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$253 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$261 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$269 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$277 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$285 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$29 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$293 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$299 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$305 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$313 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$321 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$329 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$337 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$345 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$35 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$353 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$359 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$365 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$373 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$381 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$389 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$397 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$405 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$41 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$413 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$47 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$53 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$59 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$65 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$73 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$81 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$89 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire \in_down$97 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$107 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$115 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$127 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$135 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$143 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$151 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$159 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$167 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$175 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$187 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$195 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$203 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$211 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$219 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$227 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$235 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$247 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$25 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$255 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$263 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$271 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$279 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$287 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$295 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$307 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$31 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$315 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$323 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$331 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$339 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$347 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$355 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$367 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$37 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$375 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$383 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$391 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$399 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$407 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$415 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$423 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$429 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$43 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$435 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$441 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$447 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$453 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$459 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$49 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$55 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$67 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$75 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$83 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$91 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire \in_left$99 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$101 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$109 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$121 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$129 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$137 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$145 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$153 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$161 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$169 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$181 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$189 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$197 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$205 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$21 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$213 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$221 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$229 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$241 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$249 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$257 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$265 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$27 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$273 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$281 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$289 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$301 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$309 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$317 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$325 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$33 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$333 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$341 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$349 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$361 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$369 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$377 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$385 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$39 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$393 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$401 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$409 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$419 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$425 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$431 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$437 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$443 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$449 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$45 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$455 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$51 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$61 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$69 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$77 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$85 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire \in_right$93 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$103 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$111 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$117 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$123 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$131 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$139 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$147 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$155 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$163 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$171 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$177 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$183 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$191 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$199 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$207 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$215 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$223 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$231 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$237 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$243 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$251 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$259 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$267 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$275 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$283 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$291 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$297 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$303 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$311 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$319 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$327 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$335 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$343 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$351 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$357 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$363 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$371 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$379 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$387 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$395 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$403 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$411 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$417 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$421 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$427 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$433 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$439 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$445 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$451 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$457 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$63 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$71 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$79 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$87 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire \in_up$95 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$104 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$112 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$118 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$124 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$132 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$140 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$1412 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$1418 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$1423 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$1428 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$1433 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$1438 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$1443 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$1448 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$148 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$156 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$164 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$172 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$178 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$184 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$192 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$200 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$208 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$216 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$224 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$232 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$238 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$244 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$252 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$260 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$268 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$276 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$284 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$292 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$298 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$304 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$312 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$320 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$328 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$336 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$344 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$352 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$358 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$364 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$372 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$380 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$388 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$396 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$404 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$412 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$418 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$422 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$428 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$434 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$440 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$446 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$452 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$458 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$64 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$72 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$80 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$88 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire \out_down$96 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$102 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$110 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$1167 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$1208 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$122 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$1242 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$1276 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$130 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$1310 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$1344 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$1378 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$138 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$1413 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$146 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$154 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$162 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$170 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$182 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$190 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$198 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$206 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$214 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$22 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$222 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$230 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$242 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$250 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$258 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$266 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$274 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$28 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$282 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$290 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$302 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$310 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$318 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$326 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$334 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$34 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$342 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$350 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$362 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$370 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$378 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$386 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$394 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$40 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$402 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$410 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$420 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$426 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$432 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$438 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$444 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$450 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$456 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$46 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$52 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$62 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$70 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$78 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$86 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire \out_left$94 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$100 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$108 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$116 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$1203 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$1237 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$1271 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$128 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$1305 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$1339 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$136 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$1373 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$1407 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$144 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$1449 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$152 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$160 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$168 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$176 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$188 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$196 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$204 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$212 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$220 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$228 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$236 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$248 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$256 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$26 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$264 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$272 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$280 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$288 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$296 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$308 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$316 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$32 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$324 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$332 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$340 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$348 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$356 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$368 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$376 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$38 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$384 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$392 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$400 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$408 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$416 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$424 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$430 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$436 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$44 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$442 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$448 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$454 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$460 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$50 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$56 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$68 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$76 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$84 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire \out_right$92 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$106 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$114 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$1166 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$1172 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$1177 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$1182 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$1187 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$1192 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$1197 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$120 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$1202 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$126 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$134 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$142 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$150 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$158 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$166 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$174 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$18 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$180 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$186 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$194 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$202 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$210 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$218 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$226 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$234 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$24 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$240 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$246 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$254 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$262 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$270 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$278 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$286 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$294 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$30 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$300 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$306 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$314 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$322 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$330 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$338 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$346 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$354 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$36 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$360 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$366 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$374 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$382 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$390 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$398 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$406 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$414 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$42 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$48 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$54 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$60 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$66 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$74 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$82 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$90 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire \out_up$98 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1006 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1013 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1020 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1027 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1034 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1041 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1048 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1055 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1062 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1069 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1076 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1083 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1090 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1097 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1104 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1111 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1118 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1125 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1132 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1139 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1146 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1153 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$1160 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$726 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$733 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$740 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$747 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$754 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$761 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$768 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$775 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$782 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$789 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$796 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$803 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$810 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$817 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$824 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$831 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$838 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$845 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$852 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$859 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$866 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$873 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$880 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$887 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$894 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$901 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$908 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$915 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$922 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$929 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$936 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$943 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$950 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$957 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$964 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$971 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$978 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$985 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$992 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] \program_down$999 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$468 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$472 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$476 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$480 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$484 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$488 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$492 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$496 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$500 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$504 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$508 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$512 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$516 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$520 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$524 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$528 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$532 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$536 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$540 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$544 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$548 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$552 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$556 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$560 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$564 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$568 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$572 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$576 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$580 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$584 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$588 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$592 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$596 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$600 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$604 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$608 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$612 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$616 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$620 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$624 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$628 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$632 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$636 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$640 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$644 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$648 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$652 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$656 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$660 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$664 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$668 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$672 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$676 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$680 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$684 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$688 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$692 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$696 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$700 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$704 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$708 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$712 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  wire \program_enable$716 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1000 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1007 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1014 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1021 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1028 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1035 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1042 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1049 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1056 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1063 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1070 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1077 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1084 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1091 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1098 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1105 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1112 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1119 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1126 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1133 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1140 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1147 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1154 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$1161 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$727 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$734 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$741 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$748 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$755 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$762 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$769 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$776 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$783 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$790 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$797 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$804 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$811 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$818 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$825 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$832 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$839 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$846 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$853 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$860 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$867 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$874 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$881 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$888 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$895 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$902 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$909 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$916 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$923 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$930 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$937 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$944 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$951 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$958 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$965 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$972 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$979 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$986 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] \program_left$993 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1001 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1008 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1015 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1022 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1029 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1036 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1043 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1050 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1057 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1064 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1071 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1078 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1085 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1092 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1099 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1106 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1113 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1120 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1127 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1134 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1141 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1148 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1155 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$1162 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$728 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$735 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$742 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$749 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$756 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$763 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$770 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$777 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$784 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$791 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$798 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$805 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$812 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$819 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$826 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$833 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$840 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$847 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$854 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$861 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$868 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$875 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$882 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$889 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$896 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$903 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$910 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$917 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$924 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$931 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$938 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$945 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$952 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$959 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$966 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$973 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$980 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$987 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] \program_right$994 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$467 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$471 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$475 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$479 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$483 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$487 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$491 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$495 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$499 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$503 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$507 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$511 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$515 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$519 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$523 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$527 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$531 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$535 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$539 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$543 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$547 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$551 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$555 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$559 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$563 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$567 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$571 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$575 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$579 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$583 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$587 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$591 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$595 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$599 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$603 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$607 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$611 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$615 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$619 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$623 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$627 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$631 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$635 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$639 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$643 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$647 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$651 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$655 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$659 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$663 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$667 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$671 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$675 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$679 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$683 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$687 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$691 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$695 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$699 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$703 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$707 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$711 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  wire \program_rst$715 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1004 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1011 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1018 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1025 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1032 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1039 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1046 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1053 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1060 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1067 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1074 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1081 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1088 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1095 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1102 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1109 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1116 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1123 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1130 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1137 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1144 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1151 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$1158 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$724 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$731 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$738 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$745 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$752 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$759 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$766 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$773 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$780 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$787 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$794 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$801 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$808 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$815 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$822 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$829 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$836 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$843 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$850 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$857 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$864 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$871 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$878 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$885 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$892 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$899 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$906 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$913 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$920 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$927 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$934 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$941 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$948 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$955 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$962 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$969 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$976 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$983 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$990 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] \program_up$997 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1002 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1009 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1016 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1023 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1030 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1037 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1044 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1051 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1058 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1065 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1072 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1079 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1086 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1093 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1100 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1107 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1114 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1121 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1128 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1135 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1142 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1149 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1156 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$1163 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1168 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1173 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1178 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1183 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1188 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1193 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1198 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1204 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1209 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1213 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1217 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1221 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1225 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1229 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1233 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1238 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1243 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1247 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1251 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1255 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1259 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1263 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1267 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1272 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1277 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1281 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1285 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1289 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1293 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1297 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1301 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1306 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1311 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1315 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1319 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1323 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1327 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1331 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1335 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1340 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1345 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1349 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1353 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1357 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1361 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1365 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1369 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1374 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1379 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1383 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1387 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1391 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1395 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1399 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1403 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1408 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1414 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1419 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1424 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1429 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1434 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1439 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1444 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  wire \rst$1450 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$722 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$729 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$736 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$743 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$750 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$757 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$764 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$771 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$778 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$785 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$792 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$799 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$806 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$813 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$820 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$827 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$834 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$841 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$848 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$855 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$862 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$869 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$876 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$883 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$890 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$897 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$904 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$911 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$918 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$925 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$932 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$939 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$946 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$953 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$960 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$967 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$974 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$981 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$988 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  wire \rst$995 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$465 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$469 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$473 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$477 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$481 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$485 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$489 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$493 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$497 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$501 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$505 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$509 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$513 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$517 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$521 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$525 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$529 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$533 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$537 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$541 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$545 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$549 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$553 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$557 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$561 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$565 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$569 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$573 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$577 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$581 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$585 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$589 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$593 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$597 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$601 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$605 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$609 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$613 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$617 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$621 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$625 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$629 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$633 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$637 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$641 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$645 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$649 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$653 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$657 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$661 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$665 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$669 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$673 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$677 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$681 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$685 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$689 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$693 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$697 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$701 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$705 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$709 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  wire \run_enable$713 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$466 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$470 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$474 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$478 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$482 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$486 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$490 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$494 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$498 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$502 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$506 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$510 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$514 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$518 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$522 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$526 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$530 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$534 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$538 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$542 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$546 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$550 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$554 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$558 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$562 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$566 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$570 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$574 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$578 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$582 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$586 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$590 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$594 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$598 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$602 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$606 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$610 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$614 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$618 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$622 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$626 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$630 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$634 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$638 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$642 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$646 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$650 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$654 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$658 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$662 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$666 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$670 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$674 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$678 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$682 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$686 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$690 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$694 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$698 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$702 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$706 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$710 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  wire \run_rst$714 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_0_0  cell_0_0 (
    .clk(clk),
    .in_down(\data_parallel$1207 [0]),
    .in_right(\data_parallel$1171 [2]),
    .out_reg(\data_parallel$1165 ),
    .\port$1104$0 (data_parallel),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_0_1  cell_0_1 (
    .clk(clk),
    .in_down(\data_parallel$1212 [0]),
    .in_left(\data_parallel$1165 [3]),
    .in_right(\data_parallel$1176 [2]),
    .out_reg(\data_parallel$1171 ),
    .\port$1124$0 (\data_parallel$725 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_0_2  cell_0_2 (
    .clk(clk),
    .in_down(\data_parallel$1216 [0]),
    .in_left(\data_parallel$1171 [3]),
    .in_right(\data_parallel$1181 [2]),
    .out_reg(\data_parallel$1176 ),
    .\port$1144$0 (\data_parallel$732 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_0_3  cell_0_3 (
    .clk(clk),
    .in_down(\data_parallel$1220 [0]),
    .in_left(\data_parallel$1176 [3]),
    .in_right(\data_parallel$1186 [2]),
    .out_reg(\data_parallel$1181 ),
    .\port$1164$0 (\data_parallel$739 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_0_4  cell_0_4 (
    .clk(clk),
    .in_down(\data_parallel$1224 [0]),
    .in_left(\data_parallel$1181 [3]),
    .in_right(\data_parallel$1191 [2]),
    .out_reg(\data_parallel$1186 ),
    .\port$1184$0 (\data_parallel$746 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_0_5  cell_0_5 (
    .clk(clk),
    .in_down(\data_parallel$1228 [0]),
    .in_left(\data_parallel$1186 [3]),
    .in_right(\data_parallel$1196 [2]),
    .out_reg(\data_parallel$1191 ),
    .\port$1204$0 (\data_parallel$753 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_0_6  cell_0_6 (
    .clk(clk),
    .in_down(\data_parallel$1232 [0]),
    .in_left(\data_parallel$1191 [3]),
    .in_right(\data_parallel$1201 [2]),
    .out_reg(\data_parallel$1196 ),
    .\port$1224$0 (\data_parallel$760 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_0_7  cell_0_7 (
    .clk(clk),
    .in_down(\data_parallel$1236 [0]),
    .in_left(\data_parallel$1196 [3]),
    .out_reg(\data_parallel$1201 ),
    .\port$1244$0 (\data_parallel$767 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_1_0  cell_1_0 (
    .clk(clk),
    .in_down(\data_parallel$1241 [0]),
    .in_right(\data_parallel$1212 [2]),
    .in_up(\data_parallel$1165 [1]),
    .out_reg(\data_parallel$1207 ),
    .\port$1264$0 (\data_parallel$774 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_1_1  cell_1_1 (
    .clk(clk),
    .in_down(\data_parallel$1246 [0]),
    .in_left(\data_parallel$1207 [3]),
    .in_right(\data_parallel$1216 [2]),
    .in_up(\data_parallel$1171 [1]),
    .out_reg(\data_parallel$1212 ),
    .\port$1284$0 (\data_parallel$781 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_1_2  cell_1_2 (
    .clk(clk),
    .in_down(\data_parallel$1250 [0]),
    .in_left(\data_parallel$1212 [3]),
    .in_right(\data_parallel$1220 [2]),
    .in_up(\data_parallel$1176 [1]),
    .out_reg(\data_parallel$1216 ),
    .\port$1304$0 (\data_parallel$788 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_1_3  cell_1_3 (
    .clk(clk),
    .in_down(\data_parallel$1254 [0]),
    .in_left(\data_parallel$1216 [3]),
    .in_right(\data_parallel$1224 [2]),
    .in_up(\data_parallel$1181 [1]),
    .out_reg(\data_parallel$1220 ),
    .\port$1324$0 (\data_parallel$795 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_1_4  cell_1_4 (
    .clk(clk),
    .in_down(\data_parallel$1258 [0]),
    .in_left(\data_parallel$1220 [3]),
    .in_right(\data_parallel$1228 [2]),
    .in_up(\data_parallel$1186 [1]),
    .out_reg(\data_parallel$1224 ),
    .\port$1344$0 (\data_parallel$802 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_1_5  cell_1_5 (
    .clk(clk),
    .in_down(\data_parallel$1262 [0]),
    .in_left(\data_parallel$1224 [3]),
    .in_right(\data_parallel$1232 [2]),
    .in_up(\data_parallel$1191 [1]),
    .out_reg(\data_parallel$1228 ),
    .\port$1364$0 (\data_parallel$809 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_1_6  cell_1_6 (
    .clk(clk),
    .in_down(\data_parallel$1266 [0]),
    .in_left(\data_parallel$1228 [3]),
    .in_right(\data_parallel$1236 [2]),
    .in_up(\data_parallel$1196 [1]),
    .out_reg(\data_parallel$1232 ),
    .\port$1384$0 (\data_parallel$816 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_1_7  cell_1_7 (
    .clk(clk),
    .in_down(\data_parallel$1270 [0]),
    .in_left(\data_parallel$1232 [3]),
    .in_up(\data_parallel$1201 [1]),
    .out_reg(\data_parallel$1236 ),
    .\port$1404$0 (\data_parallel$823 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_2_0  cell_2_0 (
    .clk(clk),
    .in_down(\data_parallel$1275 [0]),
    .in_right(\data_parallel$1246 [2]),
    .in_up(\data_parallel$1207 [1]),
    .out_reg(\data_parallel$1241 ),
    .\port$1424$0 (\data_parallel$830 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_2_1  cell_2_1 (
    .clk(clk),
    .in_down(\data_parallel$1280 [0]),
    .in_left(\data_parallel$1241 [3]),
    .in_right(\data_parallel$1250 [2]),
    .in_up(\data_parallel$1212 [1]),
    .out_reg(\data_parallel$1246 ),
    .\port$1444$0 (\data_parallel$837 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_2_2  cell_2_2 (
    .clk(clk),
    .in_down(\data_parallel$1284 [0]),
    .in_left(\data_parallel$1246 [3]),
    .in_right(\data_parallel$1254 [2]),
    .in_up(\data_parallel$1216 [1]),
    .out_reg(\data_parallel$1250 ),
    .\port$1464$0 (\data_parallel$844 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_2_3  cell_2_3 (
    .clk(clk),
    .in_down(\data_parallel$1288 [0]),
    .in_left(\data_parallel$1250 [3]),
    .in_right(\data_parallel$1258 [2]),
    .in_up(\data_parallel$1220 [1]),
    .out_reg(\data_parallel$1254 ),
    .\port$1484$0 (\data_parallel$851 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_2_4  cell_2_4 (
    .clk(clk),
    .in_down(\data_parallel$1292 [0]),
    .in_left(\data_parallel$1254 [3]),
    .in_right(\data_parallel$1262 [2]),
    .in_up(\data_parallel$1224 [1]),
    .out_reg(\data_parallel$1258 ),
    .\port$1504$0 (\data_parallel$858 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_2_5  cell_2_5 (
    .clk(clk),
    .in_down(\data_parallel$1296 [0]),
    .in_left(\data_parallel$1258 [3]),
    .in_right(\data_parallel$1266 [2]),
    .in_up(\data_parallel$1228 [1]),
    .out_reg(\data_parallel$1262 ),
    .\port$1524$0 (\data_parallel$865 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_2_6  cell_2_6 (
    .clk(clk),
    .in_down(\data_parallel$1300 [0]),
    .in_left(\data_parallel$1262 [3]),
    .in_right(\data_parallel$1270 [2]),
    .in_up(\data_parallel$1232 [1]),
    .out_reg(\data_parallel$1266 ),
    .\port$1544$0 (\data_parallel$872 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_2_7  cell_2_7 (
    .clk(clk),
    .in_down(\data_parallel$1304 [0]),
    .in_left(\data_parallel$1266 [3]),
    .in_up(\data_parallel$1236 [1]),
    .out_reg(\data_parallel$1270 ),
    .\port$1564$0 (\data_parallel$879 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_3_0  cell_3_0 (
    .clk(clk),
    .in_down(\data_parallel$1309 [0]),
    .in_right(\data_parallel$1280 [2]),
    .in_up(\data_parallel$1241 [1]),
    .out_reg(\data_parallel$1275 ),
    .\port$1584$0 (\data_parallel$886 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_3_1  cell_3_1 (
    .clk(clk),
    .in_down(\data_parallel$1314 [0]),
    .in_left(\data_parallel$1275 [3]),
    .in_right(\data_parallel$1284 [2]),
    .in_up(\data_parallel$1246 [1]),
    .out_reg(\data_parallel$1280 ),
    .\port$1604$0 (\data_parallel$893 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_3_2  cell_3_2 (
    .clk(clk),
    .in_down(\data_parallel$1318 [0]),
    .in_left(\data_parallel$1280 [3]),
    .in_right(\data_parallel$1288 [2]),
    .in_up(\data_parallel$1250 [1]),
    .out_reg(\data_parallel$1284 ),
    .\port$1624$0 (\data_parallel$900 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_3_3  cell_3_3 (
    .clk(clk),
    .in_down(\data_parallel$1322 [0]),
    .in_left(\data_parallel$1284 [3]),
    .in_right(\data_parallel$1292 [2]),
    .in_up(\data_parallel$1254 [1]),
    .out_reg(\data_parallel$1288 ),
    .\port$1644$0 (\data_parallel$907 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_3_4  cell_3_4 (
    .clk(clk),
    .in_down(\data_parallel$1326 [0]),
    .in_left(\data_parallel$1288 [3]),
    .in_right(\data_parallel$1296 [2]),
    .in_up(\data_parallel$1258 [1]),
    .out_reg(\data_parallel$1292 ),
    .\port$1664$0 (\data_parallel$914 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_3_5  cell_3_5 (
    .clk(clk),
    .in_down(\data_parallel$1330 [0]),
    .in_left(\data_parallel$1292 [3]),
    .in_right(\data_parallel$1300 [2]),
    .in_up(\data_parallel$1262 [1]),
    .out_reg(\data_parallel$1296 ),
    .\port$1684$0 (\data_parallel$921 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_3_6  cell_3_6 (
    .clk(clk),
    .in_down(\data_parallel$1334 [0]),
    .in_left(\data_parallel$1296 [3]),
    .in_right(\data_parallel$1304 [2]),
    .in_up(\data_parallel$1266 [1]),
    .out_reg(\data_parallel$1300 ),
    .\port$1704$0 (\data_parallel$928 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_3_7  cell_3_7 (
    .clk(clk),
    .in_down(\data_parallel$1338 [0]),
    .in_left(\data_parallel$1300 [3]),
    .in_up(\data_parallel$1270 [1]),
    .out_reg(\data_parallel$1304 ),
    .\port$1724$0 (\data_parallel$935 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_4_0  cell_4_0 (
    .clk(clk),
    .in_down(\data_parallel$1343 [0]),
    .in_right(\data_parallel$1314 [2]),
    .in_up(\data_parallel$1275 [1]),
    .out_reg(\data_parallel$1309 ),
    .\port$1744$0 (\data_parallel$942 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_4_1  cell_4_1 (
    .clk(clk),
    .in_down(\data_parallel$1348 [0]),
    .in_left(\data_parallel$1309 [3]),
    .in_right(\data_parallel$1318 [2]),
    .in_up(\data_parallel$1280 [1]),
    .out_reg(\data_parallel$1314 ),
    .\port$1764$0 (\data_parallel$949 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_4_2  cell_4_2 (
    .clk(clk),
    .in_down(\data_parallel$1352 [0]),
    .in_left(\data_parallel$1314 [3]),
    .in_right(\data_parallel$1322 [2]),
    .in_up(\data_parallel$1284 [1]),
    .out_reg(\data_parallel$1318 ),
    .\port$1784$0 (\data_parallel$956 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_4_3  cell_4_3 (
    .clk(clk),
    .in_down(\data_parallel$1356 [0]),
    .in_left(\data_parallel$1318 [3]),
    .in_right(\data_parallel$1326 [2]),
    .in_up(\data_parallel$1288 [1]),
    .out_reg(\data_parallel$1322 ),
    .\port$1804$0 (\data_parallel$963 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_4_4  cell_4_4 (
    .clk(clk),
    .in_down(\data_parallel$1360 [0]),
    .in_left(\data_parallel$1322 [3]),
    .in_right(\data_parallel$1330 [2]),
    .in_up(\data_parallel$1292 [1]),
    .out_reg(\data_parallel$1326 ),
    .\port$1824$0 (\data_parallel$970 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_4_5  cell_4_5 (
    .clk(clk),
    .in_down(\data_parallel$1364 [0]),
    .in_left(\data_parallel$1326 [3]),
    .in_right(\data_parallel$1334 [2]),
    .in_up(\data_parallel$1296 [1]),
    .out_reg(\data_parallel$1330 ),
    .\port$1844$0 (\data_parallel$977 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_4_6  cell_4_6 (
    .clk(clk),
    .in_down(\data_parallel$1368 [0]),
    .in_left(\data_parallel$1330 [3]),
    .in_right(\data_parallel$1338 [2]),
    .in_up(\data_parallel$1300 [1]),
    .out_reg(\data_parallel$1334 ),
    .\port$1864$0 (\data_parallel$984 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_4_7  cell_4_7 (
    .clk(clk),
    .in_down(\data_parallel$1372 [0]),
    .in_left(\data_parallel$1334 [3]),
    .in_up(\data_parallel$1304 [1]),
    .out_reg(\data_parallel$1338 ),
    .\port$1884$0 (\data_parallel$991 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_5_0  cell_5_0 (
    .clk(clk),
    .in_down(\data_parallel$1377 [0]),
    .in_right(\data_parallel$1348 [2]),
    .in_up(\data_parallel$1309 [1]),
    .out_reg(\data_parallel$1343 ),
    .\port$1904$0 (\data_parallel$998 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_5_1  cell_5_1 (
    .clk(clk),
    .in_down(\data_parallel$1382 [0]),
    .in_left(\data_parallel$1343 [3]),
    .in_right(\data_parallel$1352 [2]),
    .in_up(\data_parallel$1314 [1]),
    .out_reg(\data_parallel$1348 ),
    .\port$1924$0 (\data_parallel$1005 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_5_2  cell_5_2 (
    .clk(clk),
    .in_down(\data_parallel$1386 [0]),
    .in_left(\data_parallel$1348 [3]),
    .in_right(\data_parallel$1356 [2]),
    .in_up(\data_parallel$1318 [1]),
    .out_reg(\data_parallel$1352 ),
    .\port$1944$0 (\data_parallel$1012 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_5_3  cell_5_3 (
    .clk(clk),
    .in_down(\data_parallel$1390 [0]),
    .in_left(\data_parallel$1352 [3]),
    .in_right(\data_parallel$1360 [2]),
    .in_up(\data_parallel$1322 [1]),
    .out_reg(\data_parallel$1356 ),
    .\port$1964$0 (\data_parallel$1019 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_5_4  cell_5_4 (
    .clk(clk),
    .in_down(\data_parallel$1394 [0]),
    .in_left(\data_parallel$1356 [3]),
    .in_right(\data_parallel$1364 [2]),
    .in_up(\data_parallel$1326 [1]),
    .out_reg(\data_parallel$1360 ),
    .\port$1984$0 (\data_parallel$1026 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_5_5  cell_5_5 (
    .clk(clk),
    .in_down(\data_parallel$1398 [0]),
    .in_left(\data_parallel$1360 [3]),
    .in_right(\data_parallel$1368 [2]),
    .in_up(\data_parallel$1330 [1]),
    .out_reg(\data_parallel$1364 ),
    .\port$2004$0 (\data_parallel$1033 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_5_6  cell_5_6 (
    .clk(clk),
    .in_down(\data_parallel$1402 [0]),
    .in_left(\data_parallel$1364 [3]),
    .in_right(\data_parallel$1372 [2]),
    .in_up(\data_parallel$1334 [1]),
    .out_reg(\data_parallel$1368 ),
    .\port$2024$0 (\data_parallel$1040 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_5_7  cell_5_7 (
    .clk(clk),
    .in_down(\data_parallel$1406 [0]),
    .in_left(\data_parallel$1368 [3]),
    .in_up(\data_parallel$1338 [1]),
    .out_reg(\data_parallel$1372 ),
    .\port$2044$0 (\data_parallel$1047 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_6_0  cell_6_0 (
    .clk(clk),
    .in_down(\data_parallel$1411 [0]),
    .in_right(\data_parallel$1382 [2]),
    .in_up(\data_parallel$1343 [1]),
    .out_reg(\data_parallel$1377 ),
    .\port$2064$0 (\data_parallel$1054 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_6_1  cell_6_1 (
    .clk(clk),
    .in_down(\data_parallel$1417 [0]),
    .in_left(\data_parallel$1377 [3]),
    .in_right(\data_parallel$1386 [2]),
    .in_up(\data_parallel$1348 [1]),
    .out_reg(\data_parallel$1382 ),
    .\port$2084$0 (\data_parallel$1061 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_6_2  cell_6_2 (
    .clk(clk),
    .in_down(\data_parallel$1422 [0]),
    .in_left(\data_parallel$1382 [3]),
    .in_right(\data_parallel$1390 [2]),
    .in_up(\data_parallel$1352 [1]),
    .out_reg(\data_parallel$1386 ),
    .\port$2104$0 (\data_parallel$1068 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_6_3  cell_6_3 (
    .clk(clk),
    .in_down(\data_parallel$1427 [0]),
    .in_left(\data_parallel$1386 [3]),
    .in_right(\data_parallel$1394 [2]),
    .in_up(\data_parallel$1356 [1]),
    .out_reg(\data_parallel$1390 ),
    .\port$2124$0 (\data_parallel$1075 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_6_4  cell_6_4 (
    .clk(clk),
    .in_down(\data_parallel$1432 [0]),
    .in_left(\data_parallel$1390 [3]),
    .in_right(\data_parallel$1398 [2]),
    .in_up(\data_parallel$1360 [1]),
    .out_reg(\data_parallel$1394 ),
    .\port$2144$0 (\data_parallel$1082 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_6_5  cell_6_5 (
    .clk(clk),
    .in_down(\data_parallel$1437 [0]),
    .in_left(\data_parallel$1394 [3]),
    .in_right(\data_parallel$1402 [2]),
    .in_up(\data_parallel$1364 [1]),
    .out_reg(\data_parallel$1398 ),
    .\port$2164$0 (\data_parallel$1089 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_6_6  cell_6_6 (
    .clk(clk),
    .in_down(\data_parallel$1442 [0]),
    .in_left(\data_parallel$1398 [3]),
    .in_right(\data_parallel$1406 [2]),
    .in_up(\data_parallel$1368 [1]),
    .out_reg(\data_parallel$1402 ),
    .\port$2184$0 (\data_parallel$1096 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_6_7  cell_6_7 (
    .clk(clk),
    .in_down(\data_parallel$1447 [0]),
    .in_left(\data_parallel$1402 [3]),
    .in_up(\data_parallel$1372 [1]),
    .out_reg(\data_parallel$1406 ),
    .\port$2204$0 (\data_parallel$1103 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_7_0  cell_7_0 (
    .clk(clk),
    .in_right(\data_parallel$1417 [2]),
    .in_up(\data_parallel$1377 [1]),
    .out_reg(\data_parallel$1411 ),
    .\port$2224$0 (\data_parallel$1110 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_7_1  cell_7_1 (
    .clk(clk),
    .in_left(\data_parallel$1411 [3]),
    .in_right(\data_parallel$1422 [2]),
    .in_up(\data_parallel$1382 [1]),
    .out_reg(\data_parallel$1417 ),
    .\port$2244$0 (\data_parallel$1117 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_7_2  cell_7_2 (
    .clk(clk),
    .in_left(\data_parallel$1417 [3]),
    .in_right(\data_parallel$1427 [2]),
    .in_up(\data_parallel$1386 [1]),
    .out_reg(\data_parallel$1422 ),
    .\port$2264$0 (\data_parallel$1124 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_7_3  cell_7_3 (
    .clk(clk),
    .in_left(\data_parallel$1422 [3]),
    .in_right(\data_parallel$1432 [2]),
    .in_up(\data_parallel$1390 [1]),
    .out_reg(\data_parallel$1427 ),
    .\port$2284$0 (\data_parallel$1131 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_7_4  cell_7_4 (
    .clk(clk),
    .in_left(\data_parallel$1427 [3]),
    .in_right(\data_parallel$1437 [2]),
    .in_up(\data_parallel$1394 [1]),
    .out_reg(\data_parallel$1432 ),
    .\port$2304$0 (\data_parallel$1138 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_7_5  cell_7_5 (
    .clk(clk),
    .in_left(\data_parallel$1432 [3]),
    .in_right(\data_parallel$1442 [2]),
    .in_up(\data_parallel$1398 [1]),
    .out_reg(\data_parallel$1437 ),
    .\port$2324$0 (\data_parallel$1145 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_7_6  cell_7_6 (
    .clk(clk),
    .in_left(\data_parallel$1437 [3]),
    .in_right(\data_parallel$1447 [2]),
    .in_up(\data_parallel$1402 [1]),
    .out_reg(\data_parallel$1442 ),
    .\port$2344$0 (\data_parallel$1152 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:190" *)
  \top.cell_7_7  cell_7_7 (
    .clk(clk),
    .in_left(\data_parallel$1442 [3]),
    .in_up(\data_parallel$1406 [1]),
    .out_reg(\data_parallel$1447 ),
    .\port$2364$0 (\data_parallel$1159 ),
    .program_enable(global_program_enable),
    .program_rst(global_program_rst),
    .rst(rst),
    .run_enable(global_run_enable),
    .run_rst(global_run_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_0_0  prog_0_0 (
    .clk(clk),
    .data(data_parallel),
    .data_in(global_program_mem_in),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_0_1  prog_0_1 (
    .clk(clk),
    .data(\data_parallel$725 ),
    .data_in(data_parallel[0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_0_2  prog_0_2 (
    .clk(clk),
    .data(\data_parallel$732 ),
    .data_in(\data_parallel$725 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_0_3  prog_0_3 (
    .clk(clk),
    .data(\data_parallel$739 ),
    .data_in(\data_parallel$732 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_0_4  prog_0_4 (
    .clk(clk),
    .data(\data_parallel$746 ),
    .data_in(\data_parallel$739 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_0_5  prog_0_5 (
    .clk(clk),
    .data(\data_parallel$753 ),
    .data_in(\data_parallel$746 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_0_6  prog_0_6 (
    .clk(clk),
    .data(\data_parallel$760 ),
    .data_in(\data_parallel$753 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_0_7  prog_0_7 (
    .clk(clk),
    .data(\data_parallel$767 ),
    .data_in(\data_parallel$760 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_1_0  prog_1_0 (
    .clk(clk),
    .data(\data_parallel$774 ),
    .data_in(\data_parallel$781 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_1_1  prog_1_1 (
    .clk(clk),
    .data(\data_parallel$781 ),
    .data_in(\data_parallel$788 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_1_2  prog_1_2 (
    .clk(clk),
    .data(\data_parallel$788 ),
    .data_in(\data_parallel$795 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_1_3  prog_1_3 (
    .clk(clk),
    .data(\data_parallel$795 ),
    .data_in(\data_parallel$802 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_1_4  prog_1_4 (
    .clk(clk),
    .data(\data_parallel$802 ),
    .data_in(\data_parallel$809 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_1_5  prog_1_5 (
    .clk(clk),
    .data(\data_parallel$809 ),
    .data_in(\data_parallel$816 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_1_6  prog_1_6 (
    .clk(clk),
    .data(\data_parallel$816 ),
    .data_in(\data_parallel$823 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_1_7  prog_1_7 (
    .clk(clk),
    .data(\data_parallel$823 ),
    .data_in(\data_parallel$767 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_2_0  prog_2_0 (
    .clk(clk),
    .data(\data_parallel$830 ),
    .data_in(\data_parallel$774 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_2_1  prog_2_1 (
    .clk(clk),
    .data(\data_parallel$837 ),
    .data_in(\data_parallel$830 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_2_2  prog_2_2 (
    .clk(clk),
    .data(\data_parallel$844 ),
    .data_in(\data_parallel$837 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_2_3  prog_2_3 (
    .clk(clk),
    .data(\data_parallel$851 ),
    .data_in(\data_parallel$844 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_2_4  prog_2_4 (
    .clk(clk),
    .data(\data_parallel$858 ),
    .data_in(\data_parallel$851 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_2_5  prog_2_5 (
    .clk(clk),
    .data(\data_parallel$865 ),
    .data_in(\data_parallel$858 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_2_6  prog_2_6 (
    .clk(clk),
    .data(\data_parallel$872 ),
    .data_in(\data_parallel$865 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_2_7  prog_2_7 (
    .clk(clk),
    .data(\data_parallel$879 ),
    .data_in(\data_parallel$872 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_3_0  prog_3_0 (
    .clk(clk),
    .data(\data_parallel$886 ),
    .data_in(\data_parallel$893 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_3_1  prog_3_1 (
    .clk(clk),
    .data(\data_parallel$893 ),
    .data_in(\data_parallel$900 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_3_2  prog_3_2 (
    .clk(clk),
    .data(\data_parallel$900 ),
    .data_in(\data_parallel$907 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_3_3  prog_3_3 (
    .clk(clk),
    .data(\data_parallel$907 ),
    .data_in(\data_parallel$914 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_3_4  prog_3_4 (
    .clk(clk),
    .data(\data_parallel$914 ),
    .data_in(\data_parallel$921 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_3_5  prog_3_5 (
    .clk(clk),
    .data(\data_parallel$921 ),
    .data_in(\data_parallel$928 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_3_6  prog_3_6 (
    .clk(clk),
    .data(\data_parallel$928 ),
    .data_in(\data_parallel$935 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_3_7  prog_3_7 (
    .clk(clk),
    .data(\data_parallel$935 ),
    .data_in(\data_parallel$879 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_4_0  prog_4_0 (
    .clk(clk),
    .data(\data_parallel$942 ),
    .data_in(\data_parallel$886 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_4_1  prog_4_1 (
    .clk(clk),
    .data(\data_parallel$949 ),
    .data_in(\data_parallel$942 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_4_2  prog_4_2 (
    .clk(clk),
    .data(\data_parallel$956 ),
    .data_in(\data_parallel$949 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_4_3  prog_4_3 (
    .clk(clk),
    .data(\data_parallel$963 ),
    .data_in(\data_parallel$956 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_4_4  prog_4_4 (
    .clk(clk),
    .data(\data_parallel$970 ),
    .data_in(\data_parallel$963 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_4_5  prog_4_5 (
    .clk(clk),
    .data(\data_parallel$977 ),
    .data_in(\data_parallel$970 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_4_6  prog_4_6 (
    .clk(clk),
    .data(\data_parallel$984 ),
    .data_in(\data_parallel$977 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_4_7  prog_4_7 (
    .clk(clk),
    .data(\data_parallel$991 ),
    .data_in(\data_parallel$984 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_5_0  prog_5_0 (
    .clk(clk),
    .data(\data_parallel$998 ),
    .data_in(\data_parallel$1005 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_5_1  prog_5_1 (
    .clk(clk),
    .data(\data_parallel$1005 ),
    .data_in(\data_parallel$1012 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_5_2  prog_5_2 (
    .clk(clk),
    .data(\data_parallel$1012 ),
    .data_in(\data_parallel$1019 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_5_3  prog_5_3 (
    .clk(clk),
    .data(\data_parallel$1019 ),
    .data_in(\data_parallel$1026 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_5_4  prog_5_4 (
    .clk(clk),
    .data(\data_parallel$1026 ),
    .data_in(\data_parallel$1033 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_5_5  prog_5_5 (
    .clk(clk),
    .data(\data_parallel$1033 ),
    .data_in(\data_parallel$1040 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_5_6  prog_5_6 (
    .clk(clk),
    .data(\data_parallel$1040 ),
    .data_in(\data_parallel$1047 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_5_7  prog_5_7 (
    .clk(clk),
    .data(\data_parallel$1047 ),
    .data_in(\data_parallel$991 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_6_0  prog_6_0 (
    .clk(clk),
    .data(\data_parallel$1054 ),
    .data_in(\data_parallel$998 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_6_1  prog_6_1 (
    .clk(clk),
    .data(\data_parallel$1061 ),
    .data_in(\data_parallel$1054 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_6_2  prog_6_2 (
    .clk(clk),
    .data(\data_parallel$1068 ),
    .data_in(\data_parallel$1061 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_6_3  prog_6_3 (
    .clk(clk),
    .data(\data_parallel$1075 ),
    .data_in(\data_parallel$1068 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_6_4  prog_6_4 (
    .clk(clk),
    .data(\data_parallel$1082 ),
    .data_in(\data_parallel$1075 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_6_5  prog_6_5 (
    .clk(clk),
    .data(\data_parallel$1089 ),
    .data_in(\data_parallel$1082 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_6_6  prog_6_6 (
    .clk(clk),
    .data(\data_parallel$1096 ),
    .data_in(\data_parallel$1089 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_6_7  prog_6_7 (
    .clk(clk),
    .data(\data_parallel$1103 ),
    .data_in(\data_parallel$1096 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_7_0  prog_7_0 (
    .clk(clk),
    .data(\data_parallel$1110 ),
    .data_in(\data_parallel$1117 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_7_1  prog_7_1 (
    .clk(clk),
    .data(\data_parallel$1117 ),
    .data_in(\data_parallel$1124 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_7_2  prog_7_2 (
    .clk(clk),
    .data(\data_parallel$1124 ),
    .data_in(\data_parallel$1131 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_7_3  prog_7_3 (
    .clk(clk),
    .data(\data_parallel$1131 ),
    .data_in(\data_parallel$1138 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_7_4  prog_7_4 (
    .clk(clk),
    .data(\data_parallel$1138 ),
    .data_in(\data_parallel$1145 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_7_5  prog_7_5 (
    .clk(clk),
    .data(\data_parallel$1145 ),
    .data_in(\data_parallel$1152 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_7_6  prog_7_6 (
    .clk(clk),
    .data(\data_parallel$1152 ),
    .data_in(\data_parallel$1159 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:191" *)
  \top.prog_7_7  prog_7_7 (
    .clk(clk),
    .data(\data_parallel$1159 ),
    .data_in(\data_parallel$1103 [0]),
    .enable(global_program_mem_enable),
    .rst(rst),
    .\rst$2 (global_program_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_0_0  state_0_0 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_out(\data_in$1455 ),
    .data_parallel(\data_parallel$1165 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_0_1  state_0_1 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1455 ),
    .data_out(\data_in$1459 ),
    .data_parallel(\data_parallel$1171 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_0_2  state_0_2 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1459 ),
    .data_out(\data_in$1463 ),
    .data_parallel(\data_parallel$1176 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_0_3  state_0_3 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1463 ),
    .data_out(\data_in$1467 ),
    .data_parallel(\data_parallel$1181 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_0_4  state_0_4 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1467 ),
    .data_out(\data_in$1471 ),
    .data_parallel(\data_parallel$1186 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_0_5  state_0_5 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1471 ),
    .data_out(\data_in$1475 ),
    .data_parallel(\data_parallel$1191 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_0_6  state_0_6 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1475 ),
    .data_out(\data_in$1479 ),
    .data_parallel(\data_parallel$1196 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_0_7  state_0_7 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1479 ),
    .data_out(\data_in$1679 ),
    .data_parallel(\data_parallel$1201 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_1_0  state_1_0 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1483 ),
    .data_out(\data_in$1683 ),
    .data_parallel(\data_parallel$1207 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_1_1  state_1_1 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1487 ),
    .data_out(\data_in$1483 ),
    .data_parallel(\data_parallel$1212 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_1_2  state_1_2 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1491 ),
    .data_out(\data_in$1487 ),
    .data_parallel(\data_parallel$1216 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_1_3  state_1_3 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1495 ),
    .data_out(\data_in$1491 ),
    .data_parallel(\data_parallel$1220 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_1_4  state_1_4 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1499 ),
    .data_out(\data_in$1495 ),
    .data_parallel(\data_parallel$1224 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_1_5  state_1_5 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1503 ),
    .data_out(\data_in$1499 ),
    .data_parallel(\data_parallel$1228 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_1_6  state_1_6 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1507 ),
    .data_out(\data_in$1503 ),
    .data_parallel(\data_parallel$1232 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_1_7  state_1_7 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1679 ),
    .data_out(\data_in$1507 ),
    .data_parallel(\data_parallel$1236 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_2_0  state_2_0 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1683 ),
    .data_out(\data_in$1511 ),
    .data_parallel(\data_parallel$1241 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_2_1  state_2_1 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1511 ),
    .data_out(\data_in$1515 ),
    .data_parallel(\data_parallel$1246 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_2_2  state_2_2 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1515 ),
    .data_out(\data_in$1519 ),
    .data_parallel(\data_parallel$1250 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_2_3  state_2_3 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1519 ),
    .data_out(\data_in$1523 ),
    .data_parallel(\data_parallel$1254 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_2_4  state_2_4 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1523 ),
    .data_out(\data_in$1527 ),
    .data_parallel(\data_parallel$1258 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_2_5  state_2_5 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1527 ),
    .data_out(\data_in$1531 ),
    .data_parallel(\data_parallel$1262 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_2_6  state_2_6 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1531 ),
    .data_out(\data_in$1535 ),
    .data_parallel(\data_parallel$1266 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_2_7  state_2_7 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1535 ),
    .data_out(\data_in$1687 ),
    .data_parallel(\data_parallel$1270 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_3_0  state_3_0 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1539 ),
    .data_out(\data_in$1691 ),
    .data_parallel(\data_parallel$1275 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_3_1  state_3_1 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1543 ),
    .data_out(\data_in$1539 ),
    .data_parallel(\data_parallel$1280 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_3_2  state_3_2 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1547 ),
    .data_out(\data_in$1543 ),
    .data_parallel(\data_parallel$1284 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_3_3  state_3_3 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1551 ),
    .data_out(\data_in$1547 ),
    .data_parallel(\data_parallel$1288 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_3_4  state_3_4 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1555 ),
    .data_out(\data_in$1551 ),
    .data_parallel(\data_parallel$1292 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_3_5  state_3_5 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1559 ),
    .data_out(\data_in$1555 ),
    .data_parallel(\data_parallel$1296 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_3_6  state_3_6 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1563 ),
    .data_out(\data_in$1559 ),
    .data_parallel(\data_parallel$1300 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_3_7  state_3_7 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1687 ),
    .data_out(\data_in$1563 ),
    .data_parallel(\data_parallel$1304 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_4_0  state_4_0 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1691 ),
    .data_out(\data_in$1567 ),
    .data_parallel(\data_parallel$1309 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_4_1  state_4_1 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1567 ),
    .data_out(\data_in$1571 ),
    .data_parallel(\data_parallel$1314 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_4_2  state_4_2 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1571 ),
    .data_out(\data_in$1575 ),
    .data_parallel(\data_parallel$1318 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_4_3  state_4_3 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1575 ),
    .data_out(\data_in$1579 ),
    .data_parallel(\data_parallel$1322 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_4_4  state_4_4 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1579 ),
    .data_out(\data_in$1583 ),
    .data_parallel(\data_parallel$1326 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_4_5  state_4_5 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1583 ),
    .data_out(\data_in$1587 ),
    .data_parallel(\data_parallel$1330 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_4_6  state_4_6 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1587 ),
    .data_out(\data_in$1591 ),
    .data_parallel(\data_parallel$1334 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_4_7  state_4_7 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1591 ),
    .data_out(\data_in$1695 ),
    .data_parallel(\data_parallel$1338 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_5_0  state_5_0 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1595 ),
    .data_out(\data_in$1699 ),
    .data_parallel(\data_parallel$1343 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_5_1  state_5_1 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1599 ),
    .data_out(\data_in$1595 ),
    .data_parallel(\data_parallel$1348 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_5_2  state_5_2 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1603 ),
    .data_out(\data_in$1599 ),
    .data_parallel(\data_parallel$1352 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_5_3  state_5_3 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1607 ),
    .data_out(\data_in$1603 ),
    .data_parallel(\data_parallel$1356 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_5_4  state_5_4 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1611 ),
    .data_out(\data_in$1607 ),
    .data_parallel(\data_parallel$1360 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_5_5  state_5_5 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1615 ),
    .data_out(\data_in$1611 ),
    .data_parallel(\data_parallel$1364 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_5_6  state_5_6 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1619 ),
    .data_out(\data_in$1615 ),
    .data_parallel(\data_parallel$1368 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_5_7  state_5_7 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1695 ),
    .data_out(\data_in$1619 ),
    .data_parallel(\data_parallel$1372 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_6_0  state_6_0 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1699 ),
    .data_out(\data_in$1623 ),
    .data_parallel(\data_parallel$1377 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_6_1  state_6_1 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1623 ),
    .data_out(\data_in$1627 ),
    .data_parallel(\data_parallel$1382 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_6_2  state_6_2 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1627 ),
    .data_out(\data_in$1631 ),
    .data_parallel(\data_parallel$1386 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_6_3  state_6_3 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1631 ),
    .data_out(\data_in$1635 ),
    .data_parallel(\data_parallel$1390 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_6_4  state_6_4 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1635 ),
    .data_out(\data_in$1639 ),
    .data_parallel(\data_parallel$1394 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_6_5  state_6_5 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1639 ),
    .data_out(\data_in$1643 ),
    .data_parallel(\data_parallel$1398 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_6_6  state_6_6 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1643 ),
    .data_out(\data_in$1647 ),
    .data_parallel(\data_parallel$1402 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_6_7  state_6_7 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1647 ),
    .data_out(\data_in$1703 ),
    .data_parallel(\data_parallel$1406 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_7_0  state_7_0 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1651 ),
    .data_parallel(\data_parallel$1411 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_7_1  state_7_1 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1655 ),
    .data_out(\data_in$1651 ),
    .data_parallel(\data_parallel$1417 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_7_2  state_7_2 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1659 ),
    .data_out(\data_in$1655 ),
    .data_parallel(\data_parallel$1422 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_7_3  state_7_3 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1663 ),
    .data_out(\data_in$1659 ),
    .data_parallel(\data_parallel$1427 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_7_4  state_7_4 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1667 ),
    .data_out(\data_in$1663 ),
    .data_parallel(\data_parallel$1432 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_7_5  state_7_5 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1671 ),
    .data_out(\data_in$1667 ),
    .data_parallel(\data_parallel$1437 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_7_6  state_7_6 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(global_state_mem_out),
    .data_out(\data_in$1671 ),
    .data_parallel(\data_parallel$1442 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:192" *)
  \top.state_7_7  state_7_7 (
    .clk(clk),
    .data_copy(global_state_mem_copy),
    .data_in(\data_in$1703 ),
    .data_out(global_state_mem_out),
    .data_parallel(\data_parallel$1447 ),
    .enable(global_state_mem_enable),
    .rst(rst),
    .\rst$2 (global_state_mem_rst)
  );
  assign in_down = \data_parallel$1207 [0];
  assign out_up = \data_parallel$1207 [0];
  assign in_right = \data_parallel$1171 [2];
  assign out_left = \data_parallel$1171 [2];
  assign \in_down$17  = \data_parallel$1212 [0];
  assign \out_up$18  = \data_parallel$1212 [0];
  assign in_left = \data_parallel$1165 [3];
  assign out_right = \data_parallel$1165 [3];
  assign \in_right$21  = \data_parallel$1176 [2];
  assign \out_left$22  = \data_parallel$1176 [2];
  assign \in_down$23  = \data_parallel$1216 [0];
  assign \out_up$24  = \data_parallel$1216 [0];
  assign \in_left$25  = \data_parallel$1171 [3];
  assign \out_right$26  = \data_parallel$1171 [3];
  assign \in_right$27  = \data_parallel$1181 [2];
  assign \out_left$28  = \data_parallel$1181 [2];
  assign \in_down$29  = \data_parallel$1220 [0];
  assign \out_up$30  = \data_parallel$1220 [0];
  assign \in_left$31  = \data_parallel$1176 [3];
  assign \out_right$32  = \data_parallel$1176 [3];
  assign \in_right$33  = \data_parallel$1186 [2];
  assign \out_left$34  = \data_parallel$1186 [2];
  assign \in_down$35  = \data_parallel$1224 [0];
  assign \out_up$36  = \data_parallel$1224 [0];
  assign \in_left$37  = \data_parallel$1181 [3];
  assign \out_right$38  = \data_parallel$1181 [3];
  assign \in_right$39  = \data_parallel$1191 [2];
  assign \out_left$40  = \data_parallel$1191 [2];
  assign \in_down$41  = \data_parallel$1228 [0];
  assign \out_up$42  = \data_parallel$1228 [0];
  assign \in_left$43  = \data_parallel$1186 [3];
  assign \out_right$44  = \data_parallel$1186 [3];
  assign \in_right$45  = \data_parallel$1196 [2];
  assign \out_left$46  = \data_parallel$1196 [2];
  assign \in_down$47  = \data_parallel$1232 [0];
  assign \out_up$48  = \data_parallel$1232 [0];
  assign \in_left$49  = \data_parallel$1191 [3];
  assign \out_right$50  = \data_parallel$1191 [3];
  assign \in_right$51  = \data_parallel$1201 [2];
  assign \out_left$52  = \data_parallel$1201 [2];
  assign \in_down$53  = \data_parallel$1236 [0];
  assign \out_up$54  = \data_parallel$1236 [0];
  assign \in_left$55  = \data_parallel$1196 [3];
  assign \out_right$56  = \data_parallel$1196 [3];
  assign in_up = \data_parallel$1165 [1];
  assign out_down = \data_parallel$1165 [1];
  assign \in_down$59  = \data_parallel$1241 [0];
  assign \out_up$60  = \data_parallel$1241 [0];
  assign \in_right$61  = \data_parallel$1212 [2];
  assign \out_left$62  = \data_parallel$1212 [2];
  assign \in_up$63  = \data_parallel$1171 [1];
  assign \out_down$64  = \data_parallel$1171 [1];
  assign \in_down$65  = \data_parallel$1246 [0];
  assign \out_up$66  = \data_parallel$1246 [0];
  assign \in_left$67  = \data_parallel$1207 [3];
  assign \out_right$68  = \data_parallel$1207 [3];
  assign \in_right$69  = \data_parallel$1216 [2];
  assign \out_left$70  = \data_parallel$1216 [2];
  assign \in_up$71  = \data_parallel$1176 [1];
  assign \out_down$72  = \data_parallel$1176 [1];
  assign \in_down$73  = \data_parallel$1250 [0];
  assign \out_up$74  = \data_parallel$1250 [0];
  assign \in_left$75  = \data_parallel$1212 [3];
  assign \out_right$76  = \data_parallel$1212 [3];
  assign \in_right$77  = \data_parallel$1220 [2];
  assign \out_left$78  = \data_parallel$1220 [2];
  assign \in_up$79  = \data_parallel$1181 [1];
  assign \out_down$80  = \data_parallel$1181 [1];
  assign \in_down$81  = \data_parallel$1254 [0];
  assign \out_up$82  = \data_parallel$1254 [0];
  assign \in_left$83  = \data_parallel$1216 [3];
  assign \out_right$84  = \data_parallel$1216 [3];
  assign \in_right$85  = \data_parallel$1224 [2];
  assign \out_left$86  = \data_parallel$1224 [2];
  assign \in_up$87  = \data_parallel$1186 [1];
  assign \out_down$88  = \data_parallel$1186 [1];
  assign \in_down$89  = \data_parallel$1258 [0];
  assign \out_up$90  = \data_parallel$1258 [0];
  assign \in_left$91  = \data_parallel$1220 [3];
  assign \out_right$92  = \data_parallel$1220 [3];
  assign \in_right$93  = \data_parallel$1228 [2];
  assign \out_left$94  = \data_parallel$1228 [2];
  assign \in_up$95  = \data_parallel$1191 [1];
  assign \out_down$96  = \data_parallel$1191 [1];
  assign \in_down$97  = \data_parallel$1262 [0];
  assign \out_up$98  = \data_parallel$1262 [0];
  assign \in_left$99  = \data_parallel$1224 [3];
  assign \out_right$100  = \data_parallel$1224 [3];
  assign \in_right$101  = \data_parallel$1232 [2];
  assign \out_left$102  = \data_parallel$1232 [2];
  assign \in_up$103  = \data_parallel$1196 [1];
  assign \out_down$104  = \data_parallel$1196 [1];
  assign \in_down$105  = \data_parallel$1266 [0];
  assign \out_up$106  = \data_parallel$1266 [0];
  assign \in_left$107  = \data_parallel$1228 [3];
  assign \out_right$108  = \data_parallel$1228 [3];
  assign \in_right$109  = \data_parallel$1236 [2];
  assign \out_left$110  = \data_parallel$1236 [2];
  assign \in_up$111  = \data_parallel$1201 [1];
  assign \out_down$112  = \data_parallel$1201 [1];
  assign \in_down$113  = \data_parallel$1270 [0];
  assign \out_up$114  = \data_parallel$1270 [0];
  assign \in_left$115  = \data_parallel$1232 [3];
  assign \out_right$116  = \data_parallel$1232 [3];
  assign \in_up$117  = \data_parallel$1207 [1];
  assign \out_down$118  = \data_parallel$1207 [1];
  assign \in_down$119  = \data_parallel$1275 [0];
  assign \out_up$120  = \data_parallel$1275 [0];
  assign \in_right$121  = \data_parallel$1246 [2];
  assign \out_left$122  = \data_parallel$1246 [2];
  assign \in_up$123  = \data_parallel$1212 [1];
  assign \out_down$124  = \data_parallel$1212 [1];
  assign \in_down$125  = \data_parallel$1280 [0];
  assign \out_up$126  = \data_parallel$1280 [0];
  assign \in_left$127  = \data_parallel$1241 [3];
  assign \out_right$128  = \data_parallel$1241 [3];
  assign \in_right$129  = \data_parallel$1250 [2];
  assign \out_left$130  = \data_parallel$1250 [2];
  assign \in_up$131  = \data_parallel$1216 [1];
  assign \out_down$132  = \data_parallel$1216 [1];
  assign \in_down$133  = \data_parallel$1284 [0];
  assign \out_up$134  = \data_parallel$1284 [0];
  assign \in_left$135  = \data_parallel$1246 [3];
  assign \out_right$136  = \data_parallel$1246 [3];
  assign \in_right$137  = \data_parallel$1254 [2];
  assign \out_left$138  = \data_parallel$1254 [2];
  assign \in_up$139  = \data_parallel$1220 [1];
  assign \out_down$140  = \data_parallel$1220 [1];
  assign \in_down$141  = \data_parallel$1288 [0];
  assign \out_up$142  = \data_parallel$1288 [0];
  assign \in_left$143  = \data_parallel$1250 [3];
  assign \out_right$144  = \data_parallel$1250 [3];
  assign \in_right$145  = \data_parallel$1258 [2];
  assign \out_left$146  = \data_parallel$1258 [2];
  assign \in_up$147  = \data_parallel$1224 [1];
  assign \out_down$148  = \data_parallel$1224 [1];
  assign \in_down$149  = \data_parallel$1292 [0];
  assign \out_up$150  = \data_parallel$1292 [0];
  assign \in_left$151  = \data_parallel$1254 [3];
  assign \out_right$152  = \data_parallel$1254 [3];
  assign \in_right$153  = \data_parallel$1262 [2];
  assign \out_left$154  = \data_parallel$1262 [2];
  assign \in_up$155  = \data_parallel$1228 [1];
  assign \out_down$156  = \data_parallel$1228 [1];
  assign \in_down$157  = \data_parallel$1296 [0];
  assign \out_up$158  = \data_parallel$1296 [0];
  assign \in_left$159  = \data_parallel$1258 [3];
  assign \out_right$160  = \data_parallel$1258 [3];
  assign \in_right$161  = \data_parallel$1266 [2];
  assign \out_left$162  = \data_parallel$1266 [2];
  assign \in_up$163  = \data_parallel$1232 [1];
  assign \out_down$164  = \data_parallel$1232 [1];
  assign \in_down$165  = \data_parallel$1300 [0];
  assign \out_up$166  = \data_parallel$1300 [0];
  assign \in_left$167  = \data_parallel$1262 [3];
  assign \out_right$168  = \data_parallel$1262 [3];
  assign \in_right$169  = \data_parallel$1270 [2];
  assign \out_left$170  = \data_parallel$1270 [2];
  assign \in_up$171  = \data_parallel$1236 [1];
  assign \out_down$172  = \data_parallel$1236 [1];
  assign \in_down$173  = \data_parallel$1304 [0];
  assign \out_up$174  = \data_parallel$1304 [0];
  assign \in_left$175  = \data_parallel$1266 [3];
  assign \out_right$176  = \data_parallel$1266 [3];
  assign \in_up$177  = \data_parallel$1241 [1];
  assign \out_down$178  = \data_parallel$1241 [1];
  assign \in_down$179  = \data_parallel$1309 [0];
  assign \out_up$180  = \data_parallel$1309 [0];
  assign \in_right$181  = \data_parallel$1280 [2];
  assign \out_left$182  = \data_parallel$1280 [2];
  assign \in_up$183  = \data_parallel$1246 [1];
  assign \out_down$184  = \data_parallel$1246 [1];
  assign \in_down$185  = \data_parallel$1314 [0];
  assign \out_up$186  = \data_parallel$1314 [0];
  assign \in_left$187  = \data_parallel$1275 [3];
  assign \out_right$188  = \data_parallel$1275 [3];
  assign \in_right$189  = \data_parallel$1284 [2];
  assign \out_left$190  = \data_parallel$1284 [2];
  assign \in_up$191  = \data_parallel$1250 [1];
  assign \out_down$192  = \data_parallel$1250 [1];
  assign \in_down$193  = \data_parallel$1318 [0];
  assign \out_up$194  = \data_parallel$1318 [0];
  assign \in_left$195  = \data_parallel$1280 [3];
  assign \out_right$196  = \data_parallel$1280 [3];
  assign \in_right$197  = \data_parallel$1288 [2];
  assign \out_left$198  = \data_parallel$1288 [2];
  assign \in_up$199  = \data_parallel$1254 [1];
  assign \out_down$200  = \data_parallel$1254 [1];
  assign \in_down$201  = \data_parallel$1322 [0];
  assign \out_up$202  = \data_parallel$1322 [0];
  assign \in_left$203  = \data_parallel$1284 [3];
  assign \out_right$204  = \data_parallel$1284 [3];
  assign \in_right$205  = \data_parallel$1292 [2];
  assign \out_left$206  = \data_parallel$1292 [2];
  assign \in_up$207  = \data_parallel$1258 [1];
  assign \out_down$208  = \data_parallel$1258 [1];
  assign \in_down$209  = \data_parallel$1326 [0];
  assign \out_up$210  = \data_parallel$1326 [0];
  assign \in_left$211  = \data_parallel$1288 [3];
  assign \out_right$212  = \data_parallel$1288 [3];
  assign \in_right$213  = \data_parallel$1296 [2];
  assign \out_left$214  = \data_parallel$1296 [2];
  assign \in_up$215  = \data_parallel$1262 [1];
  assign \out_down$216  = \data_parallel$1262 [1];
  assign \in_down$217  = \data_parallel$1330 [0];
  assign \out_up$218  = \data_parallel$1330 [0];
  assign \in_left$219  = \data_parallel$1292 [3];
  assign \out_right$220  = \data_parallel$1292 [3];
  assign \in_right$221  = \data_parallel$1300 [2];
  assign \out_left$222  = \data_parallel$1300 [2];
  assign \in_up$223  = \data_parallel$1266 [1];
  assign \out_down$224  = \data_parallel$1266 [1];
  assign \in_down$225  = \data_parallel$1334 [0];
  assign \out_up$226  = \data_parallel$1334 [0];
  assign \in_left$227  = \data_parallel$1296 [3];
  assign \out_right$228  = \data_parallel$1296 [3];
  assign \in_right$229  = \data_parallel$1304 [2];
  assign \out_left$230  = \data_parallel$1304 [2];
  assign \in_up$231  = \data_parallel$1270 [1];
  assign \out_down$232  = \data_parallel$1270 [1];
  assign \in_down$233  = \data_parallel$1338 [0];
  assign \out_up$234  = \data_parallel$1338 [0];
  assign \in_left$235  = \data_parallel$1300 [3];
  assign \out_right$236  = \data_parallel$1300 [3];
  assign \in_up$237  = \data_parallel$1275 [1];
  assign \out_down$238  = \data_parallel$1275 [1];
  assign \in_down$239  = \data_parallel$1343 [0];
  assign \out_up$240  = \data_parallel$1343 [0];
  assign \in_right$241  = \data_parallel$1314 [2];
  assign \out_left$242  = \data_parallel$1314 [2];
  assign \in_up$243  = \data_parallel$1280 [1];
  assign \out_down$244  = \data_parallel$1280 [1];
  assign \in_down$245  = \data_parallel$1348 [0];
  assign \out_up$246  = \data_parallel$1348 [0];
  assign \in_left$247  = \data_parallel$1309 [3];
  assign \out_right$248  = \data_parallel$1309 [3];
  assign \in_right$249  = \data_parallel$1318 [2];
  assign \out_left$250  = \data_parallel$1318 [2];
  assign \in_up$251  = \data_parallel$1284 [1];
  assign \out_down$252  = \data_parallel$1284 [1];
  assign \in_down$253  = \data_parallel$1352 [0];
  assign \out_up$254  = \data_parallel$1352 [0];
  assign \in_left$255  = \data_parallel$1314 [3];
  assign \out_right$256  = \data_parallel$1314 [3];
  assign \in_right$257  = \data_parallel$1322 [2];
  assign \out_left$258  = \data_parallel$1322 [2];
  assign \in_up$259  = \data_parallel$1288 [1];
  assign \out_down$260  = \data_parallel$1288 [1];
  assign \in_down$261  = \data_parallel$1356 [0];
  assign \out_up$262  = \data_parallel$1356 [0];
  assign \in_left$263  = \data_parallel$1318 [3];
  assign \out_right$264  = \data_parallel$1318 [3];
  assign \in_right$265  = \data_parallel$1326 [2];
  assign \out_left$266  = \data_parallel$1326 [2];
  assign \in_up$267  = \data_parallel$1292 [1];
  assign \out_down$268  = \data_parallel$1292 [1];
  assign \in_down$269  = \data_parallel$1360 [0];
  assign \out_up$270  = \data_parallel$1360 [0];
  assign \in_left$271  = \data_parallel$1322 [3];
  assign \out_right$272  = \data_parallel$1322 [3];
  assign \in_right$273  = \data_parallel$1330 [2];
  assign \out_left$274  = \data_parallel$1330 [2];
  assign \in_up$275  = \data_parallel$1296 [1];
  assign \out_down$276  = \data_parallel$1296 [1];
  assign \in_down$277  = \data_parallel$1364 [0];
  assign \out_up$278  = \data_parallel$1364 [0];
  assign \in_left$279  = \data_parallel$1326 [3];
  assign \out_right$280  = \data_parallel$1326 [3];
  assign \in_right$281  = \data_parallel$1334 [2];
  assign \out_left$282  = \data_parallel$1334 [2];
  assign \in_up$283  = \data_parallel$1300 [1];
  assign \out_down$284  = \data_parallel$1300 [1];
  assign \in_down$285  = \data_parallel$1368 [0];
  assign \out_up$286  = \data_parallel$1368 [0];
  assign \in_left$287  = \data_parallel$1330 [3];
  assign \out_right$288  = \data_parallel$1330 [3];
  assign \in_right$289  = \data_parallel$1338 [2];
  assign \out_left$290  = \data_parallel$1338 [2];
  assign \in_up$291  = \data_parallel$1304 [1];
  assign \out_down$292  = \data_parallel$1304 [1];
  assign \in_down$293  = \data_parallel$1372 [0];
  assign \out_up$294  = \data_parallel$1372 [0];
  assign \in_left$295  = \data_parallel$1334 [3];
  assign \out_right$296  = \data_parallel$1334 [3];
  assign \in_up$297  = \data_parallel$1309 [1];
  assign \out_down$298  = \data_parallel$1309 [1];
  assign \in_down$299  = \data_parallel$1377 [0];
  assign \out_up$300  = \data_parallel$1377 [0];
  assign \in_right$301  = \data_parallel$1348 [2];
  assign \out_left$302  = \data_parallel$1348 [2];
  assign \in_up$303  = \data_parallel$1314 [1];
  assign \out_down$304  = \data_parallel$1314 [1];
  assign \in_down$305  = \data_parallel$1382 [0];
  assign \out_up$306  = \data_parallel$1382 [0];
  assign \in_left$307  = \data_parallel$1343 [3];
  assign \out_right$308  = \data_parallel$1343 [3];
  assign \in_right$309  = \data_parallel$1352 [2];
  assign \out_left$310  = \data_parallel$1352 [2];
  assign \in_up$311  = \data_parallel$1318 [1];
  assign \out_down$312  = \data_parallel$1318 [1];
  assign \in_down$313  = \data_parallel$1386 [0];
  assign \out_up$314  = \data_parallel$1386 [0];
  assign \in_left$315  = \data_parallel$1348 [3];
  assign \out_right$316  = \data_parallel$1348 [3];
  assign \in_right$317  = \data_parallel$1356 [2];
  assign \out_left$318  = \data_parallel$1356 [2];
  assign \in_up$319  = \data_parallel$1322 [1];
  assign \out_down$320  = \data_parallel$1322 [1];
  assign \in_down$321  = \data_parallel$1390 [0];
  assign \out_up$322  = \data_parallel$1390 [0];
  assign \in_left$323  = \data_parallel$1352 [3];
  assign \out_right$324  = \data_parallel$1352 [3];
  assign \in_right$325  = \data_parallel$1360 [2];
  assign \out_left$326  = \data_parallel$1360 [2];
  assign \in_up$327  = \data_parallel$1326 [1];
  assign \out_down$328  = \data_parallel$1326 [1];
  assign \in_down$329  = \data_parallel$1394 [0];
  assign \out_up$330  = \data_parallel$1394 [0];
  assign \in_left$331  = \data_parallel$1356 [3];
  assign \out_right$332  = \data_parallel$1356 [3];
  assign \in_right$333  = \data_parallel$1364 [2];
  assign \out_left$334  = \data_parallel$1364 [2];
  assign \in_up$335  = \data_parallel$1330 [1];
  assign \out_down$336  = \data_parallel$1330 [1];
  assign \in_down$337  = \data_parallel$1398 [0];
  assign \out_up$338  = \data_parallel$1398 [0];
  assign \in_left$339  = \data_parallel$1360 [3];
  assign \out_right$340  = \data_parallel$1360 [3];
  assign \in_right$341  = \data_parallel$1368 [2];
  assign \out_left$342  = \data_parallel$1368 [2];
  assign \in_up$343  = \data_parallel$1334 [1];
  assign \out_down$344  = \data_parallel$1334 [1];
  assign \in_down$345  = \data_parallel$1402 [0];
  assign \out_up$346  = \data_parallel$1402 [0];
  assign \in_left$347  = \data_parallel$1364 [3];
  assign \out_right$348  = \data_parallel$1364 [3];
  assign \in_right$349  = \data_parallel$1372 [2];
  assign \out_left$350  = \data_parallel$1372 [2];
  assign \in_up$351  = \data_parallel$1338 [1];
  assign \out_down$352  = \data_parallel$1338 [1];
  assign \in_down$353  = \data_parallel$1406 [0];
  assign \out_up$354  = \data_parallel$1406 [0];
  assign \in_left$355  = \data_parallel$1368 [3];
  assign \out_right$356  = \data_parallel$1368 [3];
  assign \in_up$357  = \data_parallel$1343 [1];
  assign \out_down$358  = \data_parallel$1343 [1];
  assign \in_down$359  = \data_parallel$1411 [0];
  assign \out_up$360  = \data_parallel$1411 [0];
  assign \in_right$361  = \data_parallel$1382 [2];
  assign \out_left$362  = \data_parallel$1382 [2];
  assign \in_up$363  = \data_parallel$1348 [1];
  assign \out_down$364  = \data_parallel$1348 [1];
  assign \in_down$365  = \data_parallel$1417 [0];
  assign \out_up$366  = \data_parallel$1417 [0];
  assign \in_left$367  = \data_parallel$1377 [3];
  assign \out_right$368  = \data_parallel$1377 [3];
  assign \in_right$369  = \data_parallel$1386 [2];
  assign \out_left$370  = \data_parallel$1386 [2];
  assign \in_up$371  = \data_parallel$1352 [1];
  assign \out_down$372  = \data_parallel$1352 [1];
  assign \in_down$373  = \data_parallel$1422 [0];
  assign \out_up$374  = \data_parallel$1422 [0];
  assign \in_left$375  = \data_parallel$1382 [3];
  assign \out_right$376  = \data_parallel$1382 [3];
  assign \in_right$377  = \data_parallel$1390 [2];
  assign \out_left$378  = \data_parallel$1390 [2];
  assign \in_up$379  = \data_parallel$1356 [1];
  assign \out_down$380  = \data_parallel$1356 [1];
  assign \in_down$381  = \data_parallel$1427 [0];
  assign \out_up$382  = \data_parallel$1427 [0];
  assign \in_left$383  = \data_parallel$1386 [3];
  assign \out_right$384  = \data_parallel$1386 [3];
  assign \in_right$385  = \data_parallel$1394 [2];
  assign \out_left$386  = \data_parallel$1394 [2];
  assign \in_up$387  = \data_parallel$1360 [1];
  assign \out_down$388  = \data_parallel$1360 [1];
  assign \in_down$389  = \data_parallel$1432 [0];
  assign \out_up$390  = \data_parallel$1432 [0];
  assign \in_left$391  = \data_parallel$1390 [3];
  assign \out_right$392  = \data_parallel$1390 [3];
  assign \in_right$393  = \data_parallel$1398 [2];
  assign \out_left$394  = \data_parallel$1398 [2];
  assign \in_up$395  = \data_parallel$1364 [1];
  assign \out_down$396  = \data_parallel$1364 [1];
  assign \in_down$397  = \data_parallel$1437 [0];
  assign \out_up$398  = \data_parallel$1437 [0];
  assign \in_left$399  = \data_parallel$1394 [3];
  assign \out_right$400  = \data_parallel$1394 [3];
  assign \in_right$401  = \data_parallel$1402 [2];
  assign \out_left$402  = \data_parallel$1402 [2];
  assign \in_up$403  = \data_parallel$1368 [1];
  assign \out_down$404  = \data_parallel$1368 [1];
  assign \in_down$405  = \data_parallel$1442 [0];
  assign \out_up$406  = \data_parallel$1442 [0];
  assign \in_left$407  = \data_parallel$1398 [3];
  assign \out_right$408  = \data_parallel$1398 [3];
  assign \in_right$409  = \data_parallel$1406 [2];
  assign \out_left$410  = \data_parallel$1406 [2];
  assign \in_up$411  = \data_parallel$1372 [1];
  assign \out_down$412  = \data_parallel$1372 [1];
  assign \in_down$413  = \data_parallel$1447 [0];
  assign \out_up$414  = \data_parallel$1447 [0];
  assign \in_left$415  = \data_parallel$1402 [3];
  assign \out_right$416  = \data_parallel$1402 [3];
  assign \in_up$417  = \data_parallel$1377 [1];
  assign \out_down$418  = \data_parallel$1377 [1];
  assign \in_right$419  = \data_parallel$1417 [2];
  assign \out_left$420  = \data_parallel$1417 [2];
  assign \in_up$421  = \data_parallel$1382 [1];
  assign \out_down$422  = \data_parallel$1382 [1];
  assign \in_left$423  = \data_parallel$1411 [3];
  assign \out_right$424  = \data_parallel$1411 [3];
  assign \in_right$425  = \data_parallel$1422 [2];
  assign \out_left$426  = \data_parallel$1422 [2];
  assign \in_up$427  = \data_parallel$1386 [1];
  assign \out_down$428  = \data_parallel$1386 [1];
  assign \in_left$429  = \data_parallel$1417 [3];
  assign \out_right$430  = \data_parallel$1417 [3];
  assign \in_right$431  = \data_parallel$1427 [2];
  assign \out_left$432  = \data_parallel$1427 [2];
  assign \in_up$433  = \data_parallel$1390 [1];
  assign \out_down$434  = \data_parallel$1390 [1];
  assign \in_left$435  = \data_parallel$1422 [3];
  assign \out_right$436  = \data_parallel$1422 [3];
  assign \in_right$437  = \data_parallel$1432 [2];
  assign \out_left$438  = \data_parallel$1432 [2];
  assign \in_up$439  = \data_parallel$1394 [1];
  assign \out_down$440  = \data_parallel$1394 [1];
  assign \in_left$441  = \data_parallel$1427 [3];
  assign \out_right$442  = \data_parallel$1427 [3];
  assign \in_right$443  = \data_parallel$1437 [2];
  assign \out_left$444  = \data_parallel$1437 [2];
  assign \in_up$445  = \data_parallel$1398 [1];
  assign \out_down$446  = \data_parallel$1398 [1];
  assign \in_left$447  = \data_parallel$1432 [3];
  assign \out_right$448  = \data_parallel$1432 [3];
  assign \in_right$449  = \data_parallel$1442 [2];
  assign \out_left$450  = \data_parallel$1442 [2];
  assign \in_up$451  = \data_parallel$1402 [1];
  assign \out_down$452  = \data_parallel$1402 [1];
  assign \in_left$453  = \data_parallel$1437 [3];
  assign \out_right$454  = \data_parallel$1437 [3];
  assign \in_right$455  = \data_parallel$1447 [2];
  assign \out_left$456  = \data_parallel$1447 [2];
  assign \in_up$457  = \data_parallel$1406 [1];
  assign \out_down$458  = \data_parallel$1406 [1];
  assign \in_left$459  = \data_parallel$1442 [3];
  assign \out_right$460  = \data_parallel$1442 [3];
  assign run_enable = global_run_enable;
  assign run_rst = global_run_rst;
  assign program_rst = global_program_rst;
  assign program_enable = global_program_enable;
  assign \run_enable$465  = global_run_enable;
  assign \run_rst$466  = global_run_rst;
  assign \program_rst$467  = global_program_rst;
  assign \program_enable$468  = global_program_enable;
  assign \run_enable$469  = global_run_enable;
  assign \run_rst$470  = global_run_rst;
  assign \program_rst$471  = global_program_rst;
  assign \program_enable$472  = global_program_enable;
  assign \run_enable$473  = global_run_enable;
  assign \run_rst$474  = global_run_rst;
  assign \program_rst$475  = global_program_rst;
  assign \program_enable$476  = global_program_enable;
  assign \run_enable$477  = global_run_enable;
  assign \run_rst$478  = global_run_rst;
  assign \program_rst$479  = global_program_rst;
  assign \program_enable$480  = global_program_enable;
  assign \run_enable$481  = global_run_enable;
  assign \run_rst$482  = global_run_rst;
  assign \program_rst$483  = global_program_rst;
  assign \program_enable$484  = global_program_enable;
  assign \run_enable$485  = global_run_enable;
  assign \run_rst$486  = global_run_rst;
  assign \program_rst$487  = global_program_rst;
  assign \program_enable$488  = global_program_enable;
  assign \run_enable$489  = global_run_enable;
  assign \run_rst$490  = global_run_rst;
  assign \program_rst$491  = global_program_rst;
  assign \program_enable$492  = global_program_enable;
  assign \run_enable$493  = global_run_enable;
  assign \run_rst$494  = global_run_rst;
  assign \program_rst$495  = global_program_rst;
  assign \program_enable$496  = global_program_enable;
  assign \run_enable$497  = global_run_enable;
  assign \run_rst$498  = global_run_rst;
  assign \program_rst$499  = global_program_rst;
  assign \program_enable$500  = global_program_enable;
  assign \run_enable$501  = global_run_enable;
  assign \run_rst$502  = global_run_rst;
  assign \program_rst$503  = global_program_rst;
  assign \program_enable$504  = global_program_enable;
  assign \run_enable$505  = global_run_enable;
  assign \run_rst$506  = global_run_rst;
  assign \program_rst$507  = global_program_rst;
  assign \program_enable$508  = global_program_enable;
  assign \run_enable$509  = global_run_enable;
  assign \run_rst$510  = global_run_rst;
  assign \program_rst$511  = global_program_rst;
  assign \program_enable$512  = global_program_enable;
  assign \run_enable$513  = global_run_enable;
  assign \run_rst$514  = global_run_rst;
  assign \program_rst$515  = global_program_rst;
  assign \program_enable$516  = global_program_enable;
  assign \run_enable$517  = global_run_enable;
  assign \run_rst$518  = global_run_rst;
  assign \program_rst$519  = global_program_rst;
  assign \program_enable$520  = global_program_enable;
  assign \run_enable$521  = global_run_enable;
  assign \run_rst$522  = global_run_rst;
  assign \program_rst$523  = global_program_rst;
  assign \program_enable$524  = global_program_enable;
  assign \run_enable$525  = global_run_enable;
  assign \run_rst$526  = global_run_rst;
  assign \program_rst$527  = global_program_rst;
  assign \program_enable$528  = global_program_enable;
  assign \run_enable$529  = global_run_enable;
  assign \run_rst$530  = global_run_rst;
  assign \program_rst$531  = global_program_rst;
  assign \program_enable$532  = global_program_enable;
  assign \run_enable$533  = global_run_enable;
  assign \run_rst$534  = global_run_rst;
  assign \program_rst$535  = global_program_rst;
  assign \program_enable$536  = global_program_enable;
  assign \run_enable$537  = global_run_enable;
  assign \run_rst$538  = global_run_rst;
  assign \program_rst$539  = global_program_rst;
  assign \program_enable$540  = global_program_enable;
  assign \run_enable$541  = global_run_enable;
  assign \run_rst$542  = global_run_rst;
  assign \program_rst$543  = global_program_rst;
  assign \program_enable$544  = global_program_enable;
  assign \run_enable$545  = global_run_enable;
  assign \run_rst$546  = global_run_rst;
  assign \program_rst$547  = global_program_rst;
  assign \program_enable$548  = global_program_enable;
  assign \run_enable$549  = global_run_enable;
  assign \run_rst$550  = global_run_rst;
  assign \program_rst$551  = global_program_rst;
  assign \program_enable$552  = global_program_enable;
  assign \run_enable$553  = global_run_enable;
  assign \run_rst$554  = global_run_rst;
  assign \program_rst$555  = global_program_rst;
  assign \program_enable$556  = global_program_enable;
  assign \run_enable$557  = global_run_enable;
  assign \run_rst$558  = global_run_rst;
  assign \program_rst$559  = global_program_rst;
  assign \program_enable$560  = global_program_enable;
  assign \run_enable$561  = global_run_enable;
  assign \run_rst$562  = global_run_rst;
  assign \program_rst$563  = global_program_rst;
  assign \program_enable$564  = global_program_enable;
  assign \run_enable$565  = global_run_enable;
  assign \run_rst$566  = global_run_rst;
  assign \program_rst$567  = global_program_rst;
  assign \program_enable$568  = global_program_enable;
  assign \run_enable$569  = global_run_enable;
  assign \run_rst$570  = global_run_rst;
  assign \program_rst$571  = global_program_rst;
  assign \program_enable$572  = global_program_enable;
  assign \run_enable$573  = global_run_enable;
  assign \run_rst$574  = global_run_rst;
  assign \program_rst$575  = global_program_rst;
  assign \program_enable$576  = global_program_enable;
  assign \run_enable$577  = global_run_enable;
  assign \run_rst$578  = global_run_rst;
  assign \program_rst$579  = global_program_rst;
  assign \program_enable$580  = global_program_enable;
  assign \run_enable$581  = global_run_enable;
  assign \run_rst$582  = global_run_rst;
  assign \program_rst$583  = global_program_rst;
  assign \program_enable$584  = global_program_enable;
  assign \run_enable$585  = global_run_enable;
  assign \run_rst$586  = global_run_rst;
  assign \program_rst$587  = global_program_rst;
  assign \program_enable$588  = global_program_enable;
  assign \run_enable$589  = global_run_enable;
  assign \run_rst$590  = global_run_rst;
  assign \program_rst$591  = global_program_rst;
  assign \program_enable$592  = global_program_enable;
  assign \run_enable$593  = global_run_enable;
  assign \run_rst$594  = global_run_rst;
  assign \program_rst$595  = global_program_rst;
  assign \program_enable$596  = global_program_enable;
  assign \run_enable$597  = global_run_enable;
  assign \run_rst$598  = global_run_rst;
  assign \program_rst$599  = global_program_rst;
  assign \program_enable$600  = global_program_enable;
  assign \run_enable$601  = global_run_enable;
  assign \run_rst$602  = global_run_rst;
  assign \program_rst$603  = global_program_rst;
  assign \program_enable$604  = global_program_enable;
  assign \run_enable$605  = global_run_enable;
  assign \run_rst$606  = global_run_rst;
  assign \program_rst$607  = global_program_rst;
  assign \program_enable$608  = global_program_enable;
  assign \run_enable$609  = global_run_enable;
  assign \run_rst$610  = global_run_rst;
  assign \program_rst$611  = global_program_rst;
  assign \program_enable$612  = global_program_enable;
  assign \run_enable$613  = global_run_enable;
  assign \run_rst$614  = global_run_rst;
  assign \program_rst$615  = global_program_rst;
  assign \program_enable$616  = global_program_enable;
  assign \run_enable$617  = global_run_enable;
  assign \run_rst$618  = global_run_rst;
  assign \program_rst$619  = global_program_rst;
  assign \program_enable$620  = global_program_enable;
  assign \run_enable$621  = global_run_enable;
  assign \run_rst$622  = global_run_rst;
  assign \program_rst$623  = global_program_rst;
  assign \program_enable$624  = global_program_enable;
  assign \run_enable$625  = global_run_enable;
  assign \run_rst$626  = global_run_rst;
  assign \program_rst$627  = global_program_rst;
  assign \program_enable$628  = global_program_enable;
  assign \run_enable$629  = global_run_enable;
  assign \run_rst$630  = global_run_rst;
  assign \program_rst$631  = global_program_rst;
  assign \program_enable$632  = global_program_enable;
  assign \run_enable$633  = global_run_enable;
  assign \run_rst$634  = global_run_rst;
  assign \program_rst$635  = global_program_rst;
  assign \program_enable$636  = global_program_enable;
  assign \run_enable$637  = global_run_enable;
  assign \run_rst$638  = global_run_rst;
  assign \program_rst$639  = global_program_rst;
  assign \program_enable$640  = global_program_enable;
  assign \run_enable$641  = global_run_enable;
  assign \run_rst$642  = global_run_rst;
  assign \program_rst$643  = global_program_rst;
  assign \program_enable$644  = global_program_enable;
  assign \run_enable$645  = global_run_enable;
  assign \run_rst$646  = global_run_rst;
  assign \program_rst$647  = global_program_rst;
  assign \program_enable$648  = global_program_enable;
  assign \run_enable$649  = global_run_enable;
  assign \run_rst$650  = global_run_rst;
  assign \program_rst$651  = global_program_rst;
  assign \program_enable$652  = global_program_enable;
  assign \run_enable$653  = global_run_enable;
  assign \run_rst$654  = global_run_rst;
  assign \program_rst$655  = global_program_rst;
  assign \program_enable$656  = global_program_enable;
  assign \run_enable$657  = global_run_enable;
  assign \run_rst$658  = global_run_rst;
  assign \program_rst$659  = global_program_rst;
  assign \program_enable$660  = global_program_enable;
  assign \run_enable$661  = global_run_enable;
  assign \run_rst$662  = global_run_rst;
  assign \program_rst$663  = global_program_rst;
  assign \program_enable$664  = global_program_enable;
  assign \run_enable$665  = global_run_enable;
  assign \run_rst$666  = global_run_rst;
  assign \program_rst$667  = global_program_rst;
  assign \program_enable$668  = global_program_enable;
  assign \run_enable$669  = global_run_enable;
  assign \run_rst$670  = global_run_rst;
  assign \program_rst$671  = global_program_rst;
  assign \program_enable$672  = global_program_enable;
  assign \run_enable$673  = global_run_enable;
  assign \run_rst$674  = global_run_rst;
  assign \program_rst$675  = global_program_rst;
  assign \program_enable$676  = global_program_enable;
  assign \run_enable$677  = global_run_enable;
  assign \run_rst$678  = global_run_rst;
  assign \program_rst$679  = global_program_rst;
  assign \program_enable$680  = global_program_enable;
  assign \run_enable$681  = global_run_enable;
  assign \run_rst$682  = global_run_rst;
  assign \program_rst$683  = global_program_rst;
  assign \program_enable$684  = global_program_enable;
  assign \run_enable$685  = global_run_enable;
  assign \run_rst$686  = global_run_rst;
  assign \program_rst$687  = global_program_rst;
  assign \program_enable$688  = global_program_enable;
  assign \run_enable$689  = global_run_enable;
  assign \run_rst$690  = global_run_rst;
  assign \program_rst$691  = global_program_rst;
  assign \program_enable$692  = global_program_enable;
  assign \run_enable$693  = global_run_enable;
  assign \run_rst$694  = global_run_rst;
  assign \program_rst$695  = global_program_rst;
  assign \program_enable$696  = global_program_enable;
  assign \run_enable$697  = global_run_enable;
  assign \run_rst$698  = global_run_rst;
  assign \program_rst$699  = global_program_rst;
  assign \program_enable$700  = global_program_enable;
  assign \run_enable$701  = global_run_enable;
  assign \run_rst$702  = global_run_rst;
  assign \program_rst$703  = global_program_rst;
  assign \program_enable$704  = global_program_enable;
  assign \run_enable$705  = global_run_enable;
  assign \run_rst$706  = global_run_rst;
  assign \program_rst$707  = global_program_rst;
  assign \program_enable$708  = global_program_enable;
  assign \run_enable$709  = global_run_enable;
  assign \run_rst$710  = global_run_rst;
  assign \program_rst$711  = global_program_rst;
  assign \program_enable$712  = global_program_enable;
  assign \run_enable$713  = global_run_enable;
  assign \run_rst$714  = global_run_rst;
  assign \program_rst$715  = global_program_rst;
  assign \program_enable$716  = global_program_enable;
  assign program_up = data_parallel[15:0];
  assign program_down = data_parallel[31:16];
  assign program_left = data_parallel[47:32];
  assign program_right = data_parallel[63:48];
  assign \rst$722  = global_program_mem_rst;
  assign enable = global_program_mem_enable;
  assign \program_up$724  = \data_parallel$725 [15:0];
  assign \program_down$726  = \data_parallel$725 [31:16];
  assign \program_left$727  = \data_parallel$725 [47:32];
  assign \program_right$728  = \data_parallel$725 [63:48];
  assign \rst$729  = global_program_mem_rst;
  assign \enable$730  = global_program_mem_enable;
  assign \program_up$731  = \data_parallel$732 [15:0];
  assign \program_down$733  = \data_parallel$732 [31:16];
  assign \program_left$734  = \data_parallel$732 [47:32];
  assign \program_right$735  = \data_parallel$732 [63:48];
  assign \rst$736  = global_program_mem_rst;
  assign \enable$737  = global_program_mem_enable;
  assign \program_up$738  = \data_parallel$739 [15:0];
  assign \program_down$740  = \data_parallel$739 [31:16];
  assign \program_left$741  = \data_parallel$739 [47:32];
  assign \program_right$742  = \data_parallel$739 [63:48];
  assign \rst$743  = global_program_mem_rst;
  assign \enable$744  = global_program_mem_enable;
  assign \program_up$745  = \data_parallel$746 [15:0];
  assign \program_down$747  = \data_parallel$746 [31:16];
  assign \program_left$748  = \data_parallel$746 [47:32];
  assign \program_right$749  = \data_parallel$746 [63:48];
  assign \rst$750  = global_program_mem_rst;
  assign \enable$751  = global_program_mem_enable;
  assign \program_up$752  = \data_parallel$753 [15:0];
  assign \program_down$754  = \data_parallel$753 [31:16];
  assign \program_left$755  = \data_parallel$753 [47:32];
  assign \program_right$756  = \data_parallel$753 [63:48];
  assign \rst$757  = global_program_mem_rst;
  assign \enable$758  = global_program_mem_enable;
  assign \program_up$759  = \data_parallel$760 [15:0];
  assign \program_down$761  = \data_parallel$760 [31:16];
  assign \program_left$762  = \data_parallel$760 [47:32];
  assign \program_right$763  = \data_parallel$760 [63:48];
  assign \rst$764  = global_program_mem_rst;
  assign \enable$765  = global_program_mem_enable;
  assign \program_up$766  = \data_parallel$767 [15:0];
  assign \program_down$768  = \data_parallel$767 [31:16];
  assign \program_left$769  = \data_parallel$767 [47:32];
  assign \program_right$770  = \data_parallel$767 [63:48];
  assign \rst$771  = global_program_mem_rst;
  assign \enable$772  = global_program_mem_enable;
  assign \program_up$773  = \data_parallel$774 [15:0];
  assign \program_down$775  = \data_parallel$774 [31:16];
  assign \program_left$776  = \data_parallel$774 [47:32];
  assign \program_right$777  = \data_parallel$774 [63:48];
  assign \rst$778  = global_program_mem_rst;
  assign \enable$779  = global_program_mem_enable;
  assign \program_up$780  = \data_parallel$781 [15:0];
  assign \program_down$782  = \data_parallel$781 [31:16];
  assign \program_left$783  = \data_parallel$781 [47:32];
  assign \program_right$784  = \data_parallel$781 [63:48];
  assign \rst$785  = global_program_mem_rst;
  assign \enable$786  = global_program_mem_enable;
  assign \program_up$787  = \data_parallel$788 [15:0];
  assign \program_down$789  = \data_parallel$788 [31:16];
  assign \program_left$790  = \data_parallel$788 [47:32];
  assign \program_right$791  = \data_parallel$788 [63:48];
  assign \rst$792  = global_program_mem_rst;
  assign \enable$793  = global_program_mem_enable;
  assign \program_up$794  = \data_parallel$795 [15:0];
  assign \program_down$796  = \data_parallel$795 [31:16];
  assign \program_left$797  = \data_parallel$795 [47:32];
  assign \program_right$798  = \data_parallel$795 [63:48];
  assign \rst$799  = global_program_mem_rst;
  assign \enable$800  = global_program_mem_enable;
  assign \program_up$801  = \data_parallel$802 [15:0];
  assign \program_down$803  = \data_parallel$802 [31:16];
  assign \program_left$804  = \data_parallel$802 [47:32];
  assign \program_right$805  = \data_parallel$802 [63:48];
  assign \rst$806  = global_program_mem_rst;
  assign \enable$807  = global_program_mem_enable;
  assign \program_up$808  = \data_parallel$809 [15:0];
  assign \program_down$810  = \data_parallel$809 [31:16];
  assign \program_left$811  = \data_parallel$809 [47:32];
  assign \program_right$812  = \data_parallel$809 [63:48];
  assign \rst$813  = global_program_mem_rst;
  assign \enable$814  = global_program_mem_enable;
  assign \program_up$815  = \data_parallel$816 [15:0];
  assign \program_down$817  = \data_parallel$816 [31:16];
  assign \program_left$818  = \data_parallel$816 [47:32];
  assign \program_right$819  = \data_parallel$816 [63:48];
  assign \rst$820  = global_program_mem_rst;
  assign \enable$821  = global_program_mem_enable;
  assign \program_up$822  = \data_parallel$823 [15:0];
  assign \program_down$824  = \data_parallel$823 [31:16];
  assign \program_left$825  = \data_parallel$823 [47:32];
  assign \program_right$826  = \data_parallel$823 [63:48];
  assign \rst$827  = global_program_mem_rst;
  assign \enable$828  = global_program_mem_enable;
  assign \program_up$829  = \data_parallel$830 [15:0];
  assign \program_down$831  = \data_parallel$830 [31:16];
  assign \program_left$832  = \data_parallel$830 [47:32];
  assign \program_right$833  = \data_parallel$830 [63:48];
  assign \rst$834  = global_program_mem_rst;
  assign \enable$835  = global_program_mem_enable;
  assign \program_up$836  = \data_parallel$837 [15:0];
  assign \program_down$838  = \data_parallel$837 [31:16];
  assign \program_left$839  = \data_parallel$837 [47:32];
  assign \program_right$840  = \data_parallel$837 [63:48];
  assign \rst$841  = global_program_mem_rst;
  assign \enable$842  = global_program_mem_enable;
  assign \program_up$843  = \data_parallel$844 [15:0];
  assign \program_down$845  = \data_parallel$844 [31:16];
  assign \program_left$846  = \data_parallel$844 [47:32];
  assign \program_right$847  = \data_parallel$844 [63:48];
  assign \rst$848  = global_program_mem_rst;
  assign \enable$849  = global_program_mem_enable;
  assign \program_up$850  = \data_parallel$851 [15:0];
  assign \program_down$852  = \data_parallel$851 [31:16];
  assign \program_left$853  = \data_parallel$851 [47:32];
  assign \program_right$854  = \data_parallel$851 [63:48];
  assign \rst$855  = global_program_mem_rst;
  assign \enable$856  = global_program_mem_enable;
  assign \program_up$857  = \data_parallel$858 [15:0];
  assign \program_down$859  = \data_parallel$858 [31:16];
  assign \program_left$860  = \data_parallel$858 [47:32];
  assign \program_right$861  = \data_parallel$858 [63:48];
  assign \rst$862  = global_program_mem_rst;
  assign \enable$863  = global_program_mem_enable;
  assign \program_up$864  = \data_parallel$865 [15:0];
  assign \program_down$866  = \data_parallel$865 [31:16];
  assign \program_left$867  = \data_parallel$865 [47:32];
  assign \program_right$868  = \data_parallel$865 [63:48];
  assign \rst$869  = global_program_mem_rst;
  assign \enable$870  = global_program_mem_enable;
  assign \program_up$871  = \data_parallel$872 [15:0];
  assign \program_down$873  = \data_parallel$872 [31:16];
  assign \program_left$874  = \data_parallel$872 [47:32];
  assign \program_right$875  = \data_parallel$872 [63:48];
  assign \rst$876  = global_program_mem_rst;
  assign \enable$877  = global_program_mem_enable;
  assign \program_up$878  = \data_parallel$879 [15:0];
  assign \program_down$880  = \data_parallel$879 [31:16];
  assign \program_left$881  = \data_parallel$879 [47:32];
  assign \program_right$882  = \data_parallel$879 [63:48];
  assign \rst$883  = global_program_mem_rst;
  assign \enable$884  = global_program_mem_enable;
  assign \program_up$885  = \data_parallel$886 [15:0];
  assign \program_down$887  = \data_parallel$886 [31:16];
  assign \program_left$888  = \data_parallel$886 [47:32];
  assign \program_right$889  = \data_parallel$886 [63:48];
  assign \rst$890  = global_program_mem_rst;
  assign \enable$891  = global_program_mem_enable;
  assign \program_up$892  = \data_parallel$893 [15:0];
  assign \program_down$894  = \data_parallel$893 [31:16];
  assign \program_left$895  = \data_parallel$893 [47:32];
  assign \program_right$896  = \data_parallel$893 [63:48];
  assign \rst$897  = global_program_mem_rst;
  assign \enable$898  = global_program_mem_enable;
  assign \program_up$899  = \data_parallel$900 [15:0];
  assign \program_down$901  = \data_parallel$900 [31:16];
  assign \program_left$902  = \data_parallel$900 [47:32];
  assign \program_right$903  = \data_parallel$900 [63:48];
  assign \rst$904  = global_program_mem_rst;
  assign \enable$905  = global_program_mem_enable;
  assign \program_up$906  = \data_parallel$907 [15:0];
  assign \program_down$908  = \data_parallel$907 [31:16];
  assign \program_left$909  = \data_parallel$907 [47:32];
  assign \program_right$910  = \data_parallel$907 [63:48];
  assign \rst$911  = global_program_mem_rst;
  assign \enable$912  = global_program_mem_enable;
  assign \program_up$913  = \data_parallel$914 [15:0];
  assign \program_down$915  = \data_parallel$914 [31:16];
  assign \program_left$916  = \data_parallel$914 [47:32];
  assign \program_right$917  = \data_parallel$914 [63:48];
  assign \rst$918  = global_program_mem_rst;
  assign \enable$919  = global_program_mem_enable;
  assign \program_up$920  = \data_parallel$921 [15:0];
  assign \program_down$922  = \data_parallel$921 [31:16];
  assign \program_left$923  = \data_parallel$921 [47:32];
  assign \program_right$924  = \data_parallel$921 [63:48];
  assign \rst$925  = global_program_mem_rst;
  assign \enable$926  = global_program_mem_enable;
  assign \program_up$927  = \data_parallel$928 [15:0];
  assign \program_down$929  = \data_parallel$928 [31:16];
  assign \program_left$930  = \data_parallel$928 [47:32];
  assign \program_right$931  = \data_parallel$928 [63:48];
  assign \rst$932  = global_program_mem_rst;
  assign \enable$933  = global_program_mem_enable;
  assign \program_up$934  = \data_parallel$935 [15:0];
  assign \program_down$936  = \data_parallel$935 [31:16];
  assign \program_left$937  = \data_parallel$935 [47:32];
  assign \program_right$938  = \data_parallel$935 [63:48];
  assign \rst$939  = global_program_mem_rst;
  assign \enable$940  = global_program_mem_enable;
  assign \program_up$941  = \data_parallel$942 [15:0];
  assign \program_down$943  = \data_parallel$942 [31:16];
  assign \program_left$944  = \data_parallel$942 [47:32];
  assign \program_right$945  = \data_parallel$942 [63:48];
  assign \rst$946  = global_program_mem_rst;
  assign \enable$947  = global_program_mem_enable;
  assign \program_up$948  = \data_parallel$949 [15:0];
  assign \program_down$950  = \data_parallel$949 [31:16];
  assign \program_left$951  = \data_parallel$949 [47:32];
  assign \program_right$952  = \data_parallel$949 [63:48];
  assign \rst$953  = global_program_mem_rst;
  assign \enable$954  = global_program_mem_enable;
  assign \program_up$955  = \data_parallel$956 [15:0];
  assign \program_down$957  = \data_parallel$956 [31:16];
  assign \program_left$958  = \data_parallel$956 [47:32];
  assign \program_right$959  = \data_parallel$956 [63:48];
  assign \rst$960  = global_program_mem_rst;
  assign \enable$961  = global_program_mem_enable;
  assign \program_up$962  = \data_parallel$963 [15:0];
  assign \program_down$964  = \data_parallel$963 [31:16];
  assign \program_left$965  = \data_parallel$963 [47:32];
  assign \program_right$966  = \data_parallel$963 [63:48];
  assign \rst$967  = global_program_mem_rst;
  assign \enable$968  = global_program_mem_enable;
  assign \program_up$969  = \data_parallel$970 [15:0];
  assign \program_down$971  = \data_parallel$970 [31:16];
  assign \program_left$972  = \data_parallel$970 [47:32];
  assign \program_right$973  = \data_parallel$970 [63:48];
  assign \rst$974  = global_program_mem_rst;
  assign \enable$975  = global_program_mem_enable;
  assign \program_up$976  = \data_parallel$977 [15:0];
  assign \program_down$978  = \data_parallel$977 [31:16];
  assign \program_left$979  = \data_parallel$977 [47:32];
  assign \program_right$980  = \data_parallel$977 [63:48];
  assign \rst$981  = global_program_mem_rst;
  assign \enable$982  = global_program_mem_enable;
  assign \program_up$983  = \data_parallel$984 [15:0];
  assign \program_down$985  = \data_parallel$984 [31:16];
  assign \program_left$986  = \data_parallel$984 [47:32];
  assign \program_right$987  = \data_parallel$984 [63:48];
  assign \rst$988  = global_program_mem_rst;
  assign \enable$989  = global_program_mem_enable;
  assign \program_up$990  = \data_parallel$991 [15:0];
  assign \program_down$992  = \data_parallel$991 [31:16];
  assign \program_left$993  = \data_parallel$991 [47:32];
  assign \program_right$994  = \data_parallel$991 [63:48];
  assign \rst$995  = global_program_mem_rst;
  assign \enable$996  = global_program_mem_enable;
  assign \program_up$997  = \data_parallel$998 [15:0];
  assign \program_down$999  = \data_parallel$998 [31:16];
  assign \program_left$1000  = \data_parallel$998 [47:32];
  assign \program_right$1001  = \data_parallel$998 [63:48];
  assign \rst$1002  = global_program_mem_rst;
  assign \enable$1003  = global_program_mem_enable;
  assign \program_up$1004  = \data_parallel$1005 [15:0];
  assign \program_down$1006  = \data_parallel$1005 [31:16];
  assign \program_left$1007  = \data_parallel$1005 [47:32];
  assign \program_right$1008  = \data_parallel$1005 [63:48];
  assign \rst$1009  = global_program_mem_rst;
  assign \enable$1010  = global_program_mem_enable;
  assign \program_up$1011  = \data_parallel$1012 [15:0];
  assign \program_down$1013  = \data_parallel$1012 [31:16];
  assign \program_left$1014  = \data_parallel$1012 [47:32];
  assign \program_right$1015  = \data_parallel$1012 [63:48];
  assign \rst$1016  = global_program_mem_rst;
  assign \enable$1017  = global_program_mem_enable;
  assign \program_up$1018  = \data_parallel$1019 [15:0];
  assign \program_down$1020  = \data_parallel$1019 [31:16];
  assign \program_left$1021  = \data_parallel$1019 [47:32];
  assign \program_right$1022  = \data_parallel$1019 [63:48];
  assign \rst$1023  = global_program_mem_rst;
  assign \enable$1024  = global_program_mem_enable;
  assign \program_up$1025  = \data_parallel$1026 [15:0];
  assign \program_down$1027  = \data_parallel$1026 [31:16];
  assign \program_left$1028  = \data_parallel$1026 [47:32];
  assign \program_right$1029  = \data_parallel$1026 [63:48];
  assign \rst$1030  = global_program_mem_rst;
  assign \enable$1031  = global_program_mem_enable;
  assign \program_up$1032  = \data_parallel$1033 [15:0];
  assign \program_down$1034  = \data_parallel$1033 [31:16];
  assign \program_left$1035  = \data_parallel$1033 [47:32];
  assign \program_right$1036  = \data_parallel$1033 [63:48];
  assign \rst$1037  = global_program_mem_rst;
  assign \enable$1038  = global_program_mem_enable;
  assign \program_up$1039  = \data_parallel$1040 [15:0];
  assign \program_down$1041  = \data_parallel$1040 [31:16];
  assign \program_left$1042  = \data_parallel$1040 [47:32];
  assign \program_right$1043  = \data_parallel$1040 [63:48];
  assign \rst$1044  = global_program_mem_rst;
  assign \enable$1045  = global_program_mem_enable;
  assign \program_up$1046  = \data_parallel$1047 [15:0];
  assign \program_down$1048  = \data_parallel$1047 [31:16];
  assign \program_left$1049  = \data_parallel$1047 [47:32];
  assign \program_right$1050  = \data_parallel$1047 [63:48];
  assign \rst$1051  = global_program_mem_rst;
  assign \enable$1052  = global_program_mem_enable;
  assign \program_up$1053  = \data_parallel$1054 [15:0];
  assign \program_down$1055  = \data_parallel$1054 [31:16];
  assign \program_left$1056  = \data_parallel$1054 [47:32];
  assign \program_right$1057  = \data_parallel$1054 [63:48];
  assign \rst$1058  = global_program_mem_rst;
  assign \enable$1059  = global_program_mem_enable;
  assign \program_up$1060  = \data_parallel$1061 [15:0];
  assign \program_down$1062  = \data_parallel$1061 [31:16];
  assign \program_left$1063  = \data_parallel$1061 [47:32];
  assign \program_right$1064  = \data_parallel$1061 [63:48];
  assign \rst$1065  = global_program_mem_rst;
  assign \enable$1066  = global_program_mem_enable;
  assign \program_up$1067  = \data_parallel$1068 [15:0];
  assign \program_down$1069  = \data_parallel$1068 [31:16];
  assign \program_left$1070  = \data_parallel$1068 [47:32];
  assign \program_right$1071  = \data_parallel$1068 [63:48];
  assign \rst$1072  = global_program_mem_rst;
  assign \enable$1073  = global_program_mem_enable;
  assign \program_up$1074  = \data_parallel$1075 [15:0];
  assign \program_down$1076  = \data_parallel$1075 [31:16];
  assign \program_left$1077  = \data_parallel$1075 [47:32];
  assign \program_right$1078  = \data_parallel$1075 [63:48];
  assign \rst$1079  = global_program_mem_rst;
  assign \enable$1080  = global_program_mem_enable;
  assign \program_up$1081  = \data_parallel$1082 [15:0];
  assign \program_down$1083  = \data_parallel$1082 [31:16];
  assign \program_left$1084  = \data_parallel$1082 [47:32];
  assign \program_right$1085  = \data_parallel$1082 [63:48];
  assign \rst$1086  = global_program_mem_rst;
  assign \enable$1087  = global_program_mem_enable;
  assign \program_up$1088  = \data_parallel$1089 [15:0];
  assign \program_down$1090  = \data_parallel$1089 [31:16];
  assign \program_left$1091  = \data_parallel$1089 [47:32];
  assign \program_right$1092  = \data_parallel$1089 [63:48];
  assign \rst$1093  = global_program_mem_rst;
  assign \enable$1094  = global_program_mem_enable;
  assign \program_up$1095  = \data_parallel$1096 [15:0];
  assign \program_down$1097  = \data_parallel$1096 [31:16];
  assign \program_left$1098  = \data_parallel$1096 [47:32];
  assign \program_right$1099  = \data_parallel$1096 [63:48];
  assign \rst$1100  = global_program_mem_rst;
  assign \enable$1101  = global_program_mem_enable;
  assign \program_up$1102  = \data_parallel$1103 [15:0];
  assign \program_down$1104  = \data_parallel$1103 [31:16];
  assign \program_left$1105  = \data_parallel$1103 [47:32];
  assign \program_right$1106  = \data_parallel$1103 [63:48];
  assign \rst$1107  = global_program_mem_rst;
  assign \enable$1108  = global_program_mem_enable;
  assign \program_up$1109  = \data_parallel$1110 [15:0];
  assign \program_down$1111  = \data_parallel$1110 [31:16];
  assign \program_left$1112  = \data_parallel$1110 [47:32];
  assign \program_right$1113  = \data_parallel$1110 [63:48];
  assign \rst$1114  = global_program_mem_rst;
  assign \enable$1115  = global_program_mem_enable;
  assign \program_up$1116  = \data_parallel$1117 [15:0];
  assign \program_down$1118  = \data_parallel$1117 [31:16];
  assign \program_left$1119  = \data_parallel$1117 [47:32];
  assign \program_right$1120  = \data_parallel$1117 [63:48];
  assign \rst$1121  = global_program_mem_rst;
  assign \enable$1122  = global_program_mem_enable;
  assign \program_up$1123  = \data_parallel$1124 [15:0];
  assign \program_down$1125  = \data_parallel$1124 [31:16];
  assign \program_left$1126  = \data_parallel$1124 [47:32];
  assign \program_right$1127  = \data_parallel$1124 [63:48];
  assign \rst$1128  = global_program_mem_rst;
  assign \enable$1129  = global_program_mem_enable;
  assign \program_up$1130  = \data_parallel$1131 [15:0];
  assign \program_down$1132  = \data_parallel$1131 [31:16];
  assign \program_left$1133  = \data_parallel$1131 [47:32];
  assign \program_right$1134  = \data_parallel$1131 [63:48];
  assign \rst$1135  = global_program_mem_rst;
  assign \enable$1136  = global_program_mem_enable;
  assign \program_up$1137  = \data_parallel$1138 [15:0];
  assign \program_down$1139  = \data_parallel$1138 [31:16];
  assign \program_left$1140  = \data_parallel$1138 [47:32];
  assign \program_right$1141  = \data_parallel$1138 [63:48];
  assign \rst$1142  = global_program_mem_rst;
  assign \enable$1143  = global_program_mem_enable;
  assign \program_up$1144  = \data_parallel$1145 [15:0];
  assign \program_down$1146  = \data_parallel$1145 [31:16];
  assign \program_left$1147  = \data_parallel$1145 [47:32];
  assign \program_right$1148  = \data_parallel$1145 [63:48];
  assign \rst$1149  = global_program_mem_rst;
  assign \enable$1150  = global_program_mem_enable;
  assign \program_up$1151  = \data_parallel$1152 [15:0];
  assign \program_down$1153  = \data_parallel$1152 [31:16];
  assign \program_left$1154  = \data_parallel$1152 [47:32];
  assign \program_right$1155  = \data_parallel$1152 [63:48];
  assign \rst$1156  = global_program_mem_rst;
  assign \enable$1157  = global_program_mem_enable;
  assign \program_up$1158  = \data_parallel$1159 [15:0];
  assign \program_down$1160  = \data_parallel$1159 [31:16];
  assign \program_left$1161  = \data_parallel$1159 [47:32];
  assign \program_right$1162  = \data_parallel$1159 [63:48];
  assign \rst$1163  = global_program_mem_rst;
  assign \enable$1164  = global_program_mem_enable;
  assign \out_up$1166  = \data_parallel$1165 [0];
  assign \out_left$1167  = \data_parallel$1165 [2];
  assign \rst$1168  = global_state_mem_rst;
  assign \enable$1169  = global_state_mem_enable;
  assign data_copy = global_state_mem_copy;
  assign \out_up$1172  = \data_parallel$1171 [0];
  assign \rst$1173  = global_state_mem_rst;
  assign \enable$1174  = global_state_mem_enable;
  assign \data_copy$1175  = global_state_mem_copy;
  assign \out_up$1177  = \data_parallel$1176 [0];
  assign \rst$1178  = global_state_mem_rst;
  assign \enable$1179  = global_state_mem_enable;
  assign \data_copy$1180  = global_state_mem_copy;
  assign \out_up$1182  = \data_parallel$1181 [0];
  assign \rst$1183  = global_state_mem_rst;
  assign \enable$1184  = global_state_mem_enable;
  assign \data_copy$1185  = global_state_mem_copy;
  assign \out_up$1187  = \data_parallel$1186 [0];
  assign \rst$1188  = global_state_mem_rst;
  assign \enable$1189  = global_state_mem_enable;
  assign \data_copy$1190  = global_state_mem_copy;
  assign \out_up$1192  = \data_parallel$1191 [0];
  assign \rst$1193  = global_state_mem_rst;
  assign \enable$1194  = global_state_mem_enable;
  assign \data_copy$1195  = global_state_mem_copy;
  assign \out_up$1197  = \data_parallel$1196 [0];
  assign \rst$1198  = global_state_mem_rst;
  assign \enable$1199  = global_state_mem_enable;
  assign \data_copy$1200  = global_state_mem_copy;
  assign \out_up$1202  = \data_parallel$1201 [0];
  assign \out_right$1203  = \data_parallel$1201 [3];
  assign \rst$1204  = global_state_mem_rst;
  assign \enable$1205  = global_state_mem_enable;
  assign \data_copy$1206  = global_state_mem_copy;
  assign \out_left$1208  = \data_parallel$1207 [2];
  assign \rst$1209  = global_state_mem_rst;
  assign \enable$1210  = global_state_mem_enable;
  assign \data_copy$1211  = global_state_mem_copy;
  assign \rst$1213  = global_state_mem_rst;
  assign \enable$1214  = global_state_mem_enable;
  assign \data_copy$1215  = global_state_mem_copy;
  assign \rst$1217  = global_state_mem_rst;
  assign \enable$1218  = global_state_mem_enable;
  assign \data_copy$1219  = global_state_mem_copy;
  assign \rst$1221  = global_state_mem_rst;
  assign \enable$1222  = global_state_mem_enable;
  assign \data_copy$1223  = global_state_mem_copy;
  assign \rst$1225  = global_state_mem_rst;
  assign \enable$1226  = global_state_mem_enable;
  assign \data_copy$1227  = global_state_mem_copy;
  assign \rst$1229  = global_state_mem_rst;
  assign \enable$1230  = global_state_mem_enable;
  assign \data_copy$1231  = global_state_mem_copy;
  assign \rst$1233  = global_state_mem_rst;
  assign \enable$1234  = global_state_mem_enable;
  assign \data_copy$1235  = global_state_mem_copy;
  assign \out_right$1237  = \data_parallel$1236 [3];
  assign \rst$1238  = global_state_mem_rst;
  assign \enable$1239  = global_state_mem_enable;
  assign \data_copy$1240  = global_state_mem_copy;
  assign \out_left$1242  = \data_parallel$1241 [2];
  assign \rst$1243  = global_state_mem_rst;
  assign \enable$1244  = global_state_mem_enable;
  assign \data_copy$1245  = global_state_mem_copy;
  assign \rst$1247  = global_state_mem_rst;
  assign \enable$1248  = global_state_mem_enable;
  assign \data_copy$1249  = global_state_mem_copy;
  assign \rst$1251  = global_state_mem_rst;
  assign \enable$1252  = global_state_mem_enable;
  assign \data_copy$1253  = global_state_mem_copy;
  assign \rst$1255  = global_state_mem_rst;
  assign \enable$1256  = global_state_mem_enable;
  assign \data_copy$1257  = global_state_mem_copy;
  assign \rst$1259  = global_state_mem_rst;
  assign \enable$1260  = global_state_mem_enable;
  assign \data_copy$1261  = global_state_mem_copy;
  assign \rst$1263  = global_state_mem_rst;
  assign \enable$1264  = global_state_mem_enable;
  assign \data_copy$1265  = global_state_mem_copy;
  assign \rst$1267  = global_state_mem_rst;
  assign \enable$1268  = global_state_mem_enable;
  assign \data_copy$1269  = global_state_mem_copy;
  assign \out_right$1271  = \data_parallel$1270 [3];
  assign \rst$1272  = global_state_mem_rst;
  assign \enable$1273  = global_state_mem_enable;
  assign \data_copy$1274  = global_state_mem_copy;
  assign \out_left$1276  = \data_parallel$1275 [2];
  assign \rst$1277  = global_state_mem_rst;
  assign \enable$1278  = global_state_mem_enable;
  assign \data_copy$1279  = global_state_mem_copy;
  assign \rst$1281  = global_state_mem_rst;
  assign \enable$1282  = global_state_mem_enable;
  assign \data_copy$1283  = global_state_mem_copy;
  assign \rst$1285  = global_state_mem_rst;
  assign \enable$1286  = global_state_mem_enable;
  assign \data_copy$1287  = global_state_mem_copy;
  assign \rst$1289  = global_state_mem_rst;
  assign \enable$1290  = global_state_mem_enable;
  assign \data_copy$1291  = global_state_mem_copy;
  assign \rst$1293  = global_state_mem_rst;
  assign \enable$1294  = global_state_mem_enable;
  assign \data_copy$1295  = global_state_mem_copy;
  assign \rst$1297  = global_state_mem_rst;
  assign \enable$1298  = global_state_mem_enable;
  assign \data_copy$1299  = global_state_mem_copy;
  assign \rst$1301  = global_state_mem_rst;
  assign \enable$1302  = global_state_mem_enable;
  assign \data_copy$1303  = global_state_mem_copy;
  assign \out_right$1305  = \data_parallel$1304 [3];
  assign \rst$1306  = global_state_mem_rst;
  assign \enable$1307  = global_state_mem_enable;
  assign \data_copy$1308  = global_state_mem_copy;
  assign \out_left$1310  = \data_parallel$1309 [2];
  assign \rst$1311  = global_state_mem_rst;
  assign \enable$1312  = global_state_mem_enable;
  assign \data_copy$1313  = global_state_mem_copy;
  assign \rst$1315  = global_state_mem_rst;
  assign \enable$1316  = global_state_mem_enable;
  assign \data_copy$1317  = global_state_mem_copy;
  assign \rst$1319  = global_state_mem_rst;
  assign \enable$1320  = global_state_mem_enable;
  assign \data_copy$1321  = global_state_mem_copy;
  assign \rst$1323  = global_state_mem_rst;
  assign \enable$1324  = global_state_mem_enable;
  assign \data_copy$1325  = global_state_mem_copy;
  assign \rst$1327  = global_state_mem_rst;
  assign \enable$1328  = global_state_mem_enable;
  assign \data_copy$1329  = global_state_mem_copy;
  assign \rst$1331  = global_state_mem_rst;
  assign \enable$1332  = global_state_mem_enable;
  assign \data_copy$1333  = global_state_mem_copy;
  assign \rst$1335  = global_state_mem_rst;
  assign \enable$1336  = global_state_mem_enable;
  assign \data_copy$1337  = global_state_mem_copy;
  assign \out_right$1339  = \data_parallel$1338 [3];
  assign \rst$1340  = global_state_mem_rst;
  assign \enable$1341  = global_state_mem_enable;
  assign \data_copy$1342  = global_state_mem_copy;
  assign \out_left$1344  = \data_parallel$1343 [2];
  assign \rst$1345  = global_state_mem_rst;
  assign \enable$1346  = global_state_mem_enable;
  assign \data_copy$1347  = global_state_mem_copy;
  assign \rst$1349  = global_state_mem_rst;
  assign \enable$1350  = global_state_mem_enable;
  assign \data_copy$1351  = global_state_mem_copy;
  assign \rst$1353  = global_state_mem_rst;
  assign \enable$1354  = global_state_mem_enable;
  assign \data_copy$1355  = global_state_mem_copy;
  assign \rst$1357  = global_state_mem_rst;
  assign \enable$1358  = global_state_mem_enable;
  assign \data_copy$1359  = global_state_mem_copy;
  assign \rst$1361  = global_state_mem_rst;
  assign \enable$1362  = global_state_mem_enable;
  assign \data_copy$1363  = global_state_mem_copy;
  assign \rst$1365  = global_state_mem_rst;
  assign \enable$1366  = global_state_mem_enable;
  assign \data_copy$1367  = global_state_mem_copy;
  assign \rst$1369  = global_state_mem_rst;
  assign \enable$1370  = global_state_mem_enable;
  assign \data_copy$1371  = global_state_mem_copy;
  assign \out_right$1373  = \data_parallel$1372 [3];
  assign \rst$1374  = global_state_mem_rst;
  assign \enable$1375  = global_state_mem_enable;
  assign \data_copy$1376  = global_state_mem_copy;
  assign \out_left$1378  = \data_parallel$1377 [2];
  assign \rst$1379  = global_state_mem_rst;
  assign \enable$1380  = global_state_mem_enable;
  assign \data_copy$1381  = global_state_mem_copy;
  assign \rst$1383  = global_state_mem_rst;
  assign \enable$1384  = global_state_mem_enable;
  assign \data_copy$1385  = global_state_mem_copy;
  assign \rst$1387  = global_state_mem_rst;
  assign \enable$1388  = global_state_mem_enable;
  assign \data_copy$1389  = global_state_mem_copy;
  assign \rst$1391  = global_state_mem_rst;
  assign \enable$1392  = global_state_mem_enable;
  assign \data_copy$1393  = global_state_mem_copy;
  assign \rst$1395  = global_state_mem_rst;
  assign \enable$1396  = global_state_mem_enable;
  assign \data_copy$1397  = global_state_mem_copy;
  assign \rst$1399  = global_state_mem_rst;
  assign \enable$1400  = global_state_mem_enable;
  assign \data_copy$1401  = global_state_mem_copy;
  assign \rst$1403  = global_state_mem_rst;
  assign \enable$1404  = global_state_mem_enable;
  assign \data_copy$1405  = global_state_mem_copy;
  assign \out_right$1407  = \data_parallel$1406 [3];
  assign \rst$1408  = global_state_mem_rst;
  assign \enable$1409  = global_state_mem_enable;
  assign \data_copy$1410  = global_state_mem_copy;
  assign \out_down$1412  = \data_parallel$1411 [1];
  assign \out_left$1413  = \data_parallel$1411 [2];
  assign \rst$1414  = global_state_mem_rst;
  assign \enable$1415  = global_state_mem_enable;
  assign \data_copy$1416  = global_state_mem_copy;
  assign \out_down$1418  = \data_parallel$1417 [1];
  assign \rst$1419  = global_state_mem_rst;
  assign \enable$1420  = global_state_mem_enable;
  assign \data_copy$1421  = global_state_mem_copy;
  assign \out_down$1423  = \data_parallel$1422 [1];
  assign \rst$1424  = global_state_mem_rst;
  assign \enable$1425  = global_state_mem_enable;
  assign \data_copy$1426  = global_state_mem_copy;
  assign \out_down$1428  = \data_parallel$1427 [1];
  assign \rst$1429  = global_state_mem_rst;
  assign \enable$1430  = global_state_mem_enable;
  assign \data_copy$1431  = global_state_mem_copy;
  assign \out_down$1433  = \data_parallel$1432 [1];
  assign \rst$1434  = global_state_mem_rst;
  assign \enable$1435  = global_state_mem_enable;
  assign \data_copy$1436  = global_state_mem_copy;
  assign \out_down$1438  = \data_parallel$1437 [1];
  assign \rst$1439  = global_state_mem_rst;
  assign \enable$1440  = global_state_mem_enable;
  assign \data_copy$1441  = global_state_mem_copy;
  assign \out_down$1443  = \data_parallel$1442 [1];
  assign \rst$1444  = global_state_mem_rst;
  assign \enable$1445  = global_state_mem_enable;
  assign \data_copy$1446  = global_state_mem_copy;
  assign \out_down$1448  = \data_parallel$1447 [1];
  assign \out_right$1449  = \data_parallel$1447 [3];
  assign \rst$1450  = global_state_mem_rst;
  assign \enable$1451  = global_state_mem_enable;
  assign \data_copy$1452  = global_state_mem_copy;
  assign data_in = data_parallel[0];
  assign data_out = data_parallel[0];
  assign \data_out$1456  = \data_in$1455 ;
  assign \data_in$1457  = \data_parallel$725 [0];
  assign \data_out$1458  = \data_parallel$725 [0];
  assign \data_out$1460  = \data_in$1459 ;
  assign \data_in$1461  = \data_parallel$732 [0];
  assign \data_out$1462  = \data_parallel$732 [0];
  assign \data_out$1464  = \data_in$1463 ;
  assign \data_in$1465  = \data_parallel$739 [0];
  assign \data_out$1466  = \data_parallel$739 [0];
  assign \data_out$1468  = \data_in$1467 ;
  assign \data_in$1469  = \data_parallel$746 [0];
  assign \data_out$1470  = \data_parallel$746 [0];
  assign \data_out$1472  = \data_in$1471 ;
  assign \data_in$1473  = \data_parallel$753 [0];
  assign \data_out$1474  = \data_parallel$753 [0];
  assign \data_out$1476  = \data_in$1475 ;
  assign \data_in$1477  = \data_parallel$760 [0];
  assign \data_out$1478  = \data_parallel$760 [0];
  assign \data_out$1480  = \data_in$1479 ;
  assign \data_in$1481  = \data_parallel$781 [0];
  assign \data_out$1482  = \data_parallel$781 [0];
  assign \data_out$1484  = \data_in$1483 ;
  assign \data_in$1485  = \data_parallel$788 [0];
  assign \data_out$1486  = \data_parallel$788 [0];
  assign \data_out$1488  = \data_in$1487 ;
  assign \data_in$1489  = \data_parallel$795 [0];
  assign \data_out$1490  = \data_parallel$795 [0];
  assign \data_out$1492  = \data_in$1491 ;
  assign \data_in$1493  = \data_parallel$802 [0];
  assign \data_out$1494  = \data_parallel$802 [0];
  assign \data_out$1496  = \data_in$1495 ;
  assign \data_in$1497  = \data_parallel$809 [0];
  assign \data_out$1498  = \data_parallel$809 [0];
  assign \data_out$1500  = \data_in$1499 ;
  assign \data_in$1501  = \data_parallel$816 [0];
  assign \data_out$1502  = \data_parallel$816 [0];
  assign \data_out$1504  = \data_in$1503 ;
  assign \data_in$1505  = \data_parallel$823 [0];
  assign \data_out$1506  = \data_parallel$823 [0];
  assign \data_out$1508  = \data_in$1507 ;
  assign \data_in$1509  = \data_parallel$830 [0];
  assign \data_out$1510  = \data_parallel$830 [0];
  assign \data_out$1512  = \data_in$1511 ;
  assign \data_in$1513  = \data_parallel$837 [0];
  assign \data_out$1514  = \data_parallel$837 [0];
  assign \data_out$1516  = \data_in$1515 ;
  assign \data_in$1517  = \data_parallel$844 [0];
  assign \data_out$1518  = \data_parallel$844 [0];
  assign \data_out$1520  = \data_in$1519 ;
  assign \data_in$1521  = \data_parallel$851 [0];
  assign \data_out$1522  = \data_parallel$851 [0];
  assign \data_out$1524  = \data_in$1523 ;
  assign \data_in$1525  = \data_parallel$858 [0];
  assign \data_out$1526  = \data_parallel$858 [0];
  assign \data_out$1528  = \data_in$1527 ;
  assign \data_in$1529  = \data_parallel$865 [0];
  assign \data_out$1530  = \data_parallel$865 [0];
  assign \data_out$1532  = \data_in$1531 ;
  assign \data_in$1533  = \data_parallel$872 [0];
  assign \data_out$1534  = \data_parallel$872 [0];
  assign \data_out$1536  = \data_in$1535 ;
  assign \data_in$1537  = \data_parallel$893 [0];
  assign \data_out$1538  = \data_parallel$893 [0];
  assign \data_out$1540  = \data_in$1539 ;
  assign \data_in$1541  = \data_parallel$900 [0];
  assign \data_out$1542  = \data_parallel$900 [0];
  assign \data_out$1544  = \data_in$1543 ;
  assign \data_in$1545  = \data_parallel$907 [0];
  assign \data_out$1546  = \data_parallel$907 [0];
  assign \data_out$1548  = \data_in$1547 ;
  assign \data_in$1549  = \data_parallel$914 [0];
  assign \data_out$1550  = \data_parallel$914 [0];
  assign \data_out$1552  = \data_in$1551 ;
  assign \data_in$1553  = \data_parallel$921 [0];
  assign \data_out$1554  = \data_parallel$921 [0];
  assign \data_out$1556  = \data_in$1555 ;
  assign \data_in$1557  = \data_parallel$928 [0];
  assign \data_out$1558  = \data_parallel$928 [0];
  assign \data_out$1560  = \data_in$1559 ;
  assign \data_in$1561  = \data_parallel$935 [0];
  assign \data_out$1562  = \data_parallel$935 [0];
  assign \data_out$1564  = \data_in$1563 ;
  assign \data_in$1565  = \data_parallel$942 [0];
  assign \data_out$1566  = \data_parallel$942 [0];
  assign \data_out$1568  = \data_in$1567 ;
  assign \data_in$1569  = \data_parallel$949 [0];
  assign \data_out$1570  = \data_parallel$949 [0];
  assign \data_out$1572  = \data_in$1571 ;
  assign \data_in$1573  = \data_parallel$956 [0];
  assign \data_out$1574  = \data_parallel$956 [0];
  assign \data_out$1576  = \data_in$1575 ;
  assign \data_in$1577  = \data_parallel$963 [0];
  assign \data_out$1578  = \data_parallel$963 [0];
  assign \data_out$1580  = \data_in$1579 ;
  assign \data_in$1581  = \data_parallel$970 [0];
  assign \data_out$1582  = \data_parallel$970 [0];
  assign \data_out$1584  = \data_in$1583 ;
  assign \data_in$1585  = \data_parallel$977 [0];
  assign \data_out$1586  = \data_parallel$977 [0];
  assign \data_out$1588  = \data_in$1587 ;
  assign \data_in$1589  = \data_parallel$984 [0];
  assign \data_out$1590  = \data_parallel$984 [0];
  assign \data_out$1592  = \data_in$1591 ;
  assign \data_in$1593  = \data_parallel$1005 [0];
  assign \data_out$1594  = \data_parallel$1005 [0];
  assign \data_out$1596  = \data_in$1595 ;
  assign \data_in$1597  = \data_parallel$1012 [0];
  assign \data_out$1598  = \data_parallel$1012 [0];
  assign \data_out$1600  = \data_in$1599 ;
  assign \data_in$1601  = \data_parallel$1019 [0];
  assign \data_out$1602  = \data_parallel$1019 [0];
  assign \data_out$1604  = \data_in$1603 ;
  assign \data_in$1605  = \data_parallel$1026 [0];
  assign \data_out$1606  = \data_parallel$1026 [0];
  assign \data_out$1608  = \data_in$1607 ;
  assign \data_in$1609  = \data_parallel$1033 [0];
  assign \data_out$1610  = \data_parallel$1033 [0];
  assign \data_out$1612  = \data_in$1611 ;
  assign \data_in$1613  = \data_parallel$1040 [0];
  assign \data_out$1614  = \data_parallel$1040 [0];
  assign \data_out$1616  = \data_in$1615 ;
  assign \data_in$1617  = \data_parallel$1047 [0];
  assign \data_out$1618  = \data_parallel$1047 [0];
  assign \data_out$1620  = \data_in$1619 ;
  assign \data_in$1621  = \data_parallel$1054 [0];
  assign \data_out$1622  = \data_parallel$1054 [0];
  assign \data_out$1624  = \data_in$1623 ;
  assign \data_in$1625  = \data_parallel$1061 [0];
  assign \data_out$1626  = \data_parallel$1061 [0];
  assign \data_out$1628  = \data_in$1627 ;
  assign \data_in$1629  = \data_parallel$1068 [0];
  assign \data_out$1630  = \data_parallel$1068 [0];
  assign \data_out$1632  = \data_in$1631 ;
  assign \data_in$1633  = \data_parallel$1075 [0];
  assign \data_out$1634  = \data_parallel$1075 [0];
  assign \data_out$1636  = \data_in$1635 ;
  assign \data_in$1637  = \data_parallel$1082 [0];
  assign \data_out$1638  = \data_parallel$1082 [0];
  assign \data_out$1640  = \data_in$1639 ;
  assign \data_in$1641  = \data_parallel$1089 [0];
  assign \data_out$1642  = \data_parallel$1089 [0];
  assign \data_out$1644  = \data_in$1643 ;
  assign \data_in$1645  = \data_parallel$1096 [0];
  assign \data_out$1646  = \data_parallel$1096 [0];
  assign \data_out$1648  = \data_in$1647 ;
  assign \data_in$1649  = \data_parallel$1117 [0];
  assign \data_out$1650  = \data_parallel$1117 [0];
  assign \data_out$1652  = \data_in$1651 ;
  assign \data_in$1653  = \data_parallel$1124 [0];
  assign \data_out$1654  = \data_parallel$1124 [0];
  assign \data_out$1656  = \data_in$1655 ;
  assign \data_in$1657  = \data_parallel$1131 [0];
  assign \data_out$1658  = \data_parallel$1131 [0];
  assign \data_out$1660  = \data_in$1659 ;
  assign \data_in$1661  = \data_parallel$1138 [0];
  assign \data_out$1662  = \data_parallel$1138 [0];
  assign \data_out$1664  = \data_in$1663 ;
  assign \data_in$1665  = \data_parallel$1145 [0];
  assign \data_out$1666  = \data_parallel$1145 [0];
  assign \data_out$1668  = \data_in$1667 ;
  assign \data_in$1669  = \data_parallel$1152 [0];
  assign \data_out$1670  = \data_parallel$1152 [0];
  assign \data_out$1672  = \data_in$1671 ;
  assign \data_in$1673  = \data_parallel$1159 [0];
  assign \data_out$1674  = \data_parallel$1159 [0];
  assign \data_in$1675  = global_state_mem_out;
  assign \data_out$1676  = global_state_mem_out;
  assign \data_in$1677  = \data_parallel$767 [0];
  assign \data_out$1678  = \data_parallel$767 [0];
  assign \data_out$1680  = \data_in$1679 ;
  assign \data_in$1681  = \data_parallel$774 [0];
  assign \data_out$1682  = \data_parallel$774 [0];
  assign \data_out$1684  = \data_in$1683 ;
  assign \data_in$1685  = \data_parallel$879 [0];
  assign \data_out$1686  = \data_parallel$879 [0];
  assign \data_out$1688  = \data_in$1687 ;
  assign \data_in$1689  = \data_parallel$886 [0];
  assign \data_out$1690  = \data_parallel$886 [0];
  assign \data_out$1692  = \data_in$1691 ;
  assign \data_in$1693  = \data_parallel$991 [0];
  assign \data_out$1694  = \data_parallel$991 [0];
  assign \data_out$1696  = \data_in$1695 ;
  assign \data_in$1697  = \data_parallel$998 [0];
  assign \data_out$1698  = \data_parallel$998 [0];
  assign \data_out$1700  = \data_in$1699 ;
  assign \data_in$1701  = \data_parallel$1103 [0];
  assign \data_out$1702  = \data_parallel$1103 [0];
  assign \data_out$1704  = \data_in$1703 ;
  assign \data_in$1705  = global_program_mem_in;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_0_0 (program_enable, run_rst, run_enable, clk, rst, out_reg, \port$1104$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1104$0 ;
  wire [63:0] \port$1104$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, 1'h0, in_down, 1'h0 };
  assign f_down = program_down_reg >> { in_right, 1'h0, in_down, 1'h0 };
  assign f_left = program_left_reg >> { in_right, 1'h0, in_down, 1'h0 };
  assign f_right = program_right_reg >> { in_right, 1'h0, in_down, 1'h0 };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1104$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1104$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1104$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1104$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1104$0 [15:0];
  assign program_down = \port$1104$0 [31:16];
  assign program_left = \port$1104$0 [47:32];
  assign program_right = \port$1104$0 [63:48];
  assign in_concat = { in_right, 1'h0, in_down, 1'h0 };
  assign in_up = 1'h0;
  assign in_left = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_0_1 (program_enable, run_rst, run_enable, clk, rst, in_left, out_reg, \port$1124$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$2  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1124$0 ;
  wire [63:0] \port$1124$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, 1'h0 };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, 1'h0 };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, 1'h0 };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, 1'h0 };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1124$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1124$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1124$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1124$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1124$0 [15:0];
  assign program_down = \port$1124$0 [31:16];
  assign program_left = \port$1124$0 [47:32];
  assign program_right = \port$1124$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, 1'h0 };
  assign in_up = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_0_2 (program_enable, run_rst, run_enable, clk, rst, in_left, out_reg, \port$1144$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$3  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1144$0 ;
  wire [63:0] \port$1144$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, 1'h0 };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, 1'h0 };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, 1'h0 };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, 1'h0 };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1144$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1144$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1144$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1144$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1144$0 [15:0];
  assign program_down = \port$1144$0 [31:16];
  assign program_left = \port$1144$0 [47:32];
  assign program_right = \port$1144$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, 1'h0 };
  assign in_up = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_0_3 (program_enable, run_rst, run_enable, clk, rst, in_left, out_reg, \port$1164$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$4  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1164$0 ;
  wire [63:0] \port$1164$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, 1'h0 };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, 1'h0 };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, 1'h0 };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, 1'h0 };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1164$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1164$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1164$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1164$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1164$0 [15:0];
  assign program_down = \port$1164$0 [31:16];
  assign program_left = \port$1164$0 [47:32];
  assign program_right = \port$1164$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, 1'h0 };
  assign in_up = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_0_4 (program_enable, run_rst, run_enable, clk, rst, in_left, out_reg, \port$1184$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$5  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1184$0 ;
  wire [63:0] \port$1184$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, 1'h0 };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, 1'h0 };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, 1'h0 };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, 1'h0 };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1184$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1184$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1184$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1184$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1184$0 [15:0];
  assign program_down = \port$1184$0 [31:16];
  assign program_left = \port$1184$0 [47:32];
  assign program_right = \port$1184$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, 1'h0 };
  assign in_up = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_0_5 (program_enable, run_rst, run_enable, clk, rst, in_left, out_reg, \port$1204$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$6  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1204$0 ;
  wire [63:0] \port$1204$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, 1'h0 };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, 1'h0 };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, 1'h0 };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, 1'h0 };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1204$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1204$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1204$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1204$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1204$0 [15:0];
  assign program_down = \port$1204$0 [31:16];
  assign program_left = \port$1204$0 [47:32];
  assign program_right = \port$1204$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, 1'h0 };
  assign in_up = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_0_6 (program_enable, run_rst, run_enable, clk, rst, in_left, out_reg, \port$1224$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$7  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1224$0 ;
  wire [63:0] \port$1224$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, 1'h0 };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, 1'h0 };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, 1'h0 };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, 1'h0 };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1224$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1224$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1224$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1224$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1224$0 [15:0];
  assign program_down = \port$1224$0 [31:16];
  assign program_left = \port$1224$0 [47:32];
  assign program_right = \port$1224$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, 1'h0 };
  assign in_up = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_0_7 (program_enable, run_rst, run_enable, clk, rst, in_left, out_reg, \port$1244$0 , in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$8  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1244$0 ;
  wire [63:0] \port$1244$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { 1'h0, in_left, in_down, 1'h0 };
  assign f_down = program_down_reg >> { 1'h0, in_left, in_down, 1'h0 };
  assign f_left = program_left_reg >> { 1'h0, in_left, in_down, 1'h0 };
  assign f_right = program_right_reg >> { 1'h0, in_left, in_down, 1'h0 };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1244$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1244$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1244$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1244$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1244$0 [15:0];
  assign program_down = \port$1244$0 [31:16];
  assign program_left = \port$1244$0 [47:32];
  assign program_right = \port$1244$0 [63:48];
  assign in_concat = { 1'h0, in_left, in_down, 1'h0 };
  assign in_up = 1'h0;
  assign in_right = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_1_0 (program_enable, run_rst, run_enable, clk, rst, in_up, out_reg, \port$1264$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$9  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1264$0 ;
  wire [63:0] \port$1264$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, 1'h0, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, 1'h0, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, 1'h0, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, 1'h0, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1264$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1264$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1264$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1264$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1264$0 [15:0];
  assign program_down = \port$1264$0 [31:16];
  assign program_left = \port$1264$0 [47:32];
  assign program_right = \port$1264$0 [63:48];
  assign in_concat = { in_right, 1'h0, in_down, in_up };
  assign in_left = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_1_1 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1284$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$10  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1284$0 ;
  wire [63:0] \port$1284$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1284$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1284$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1284$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1284$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1284$0 [15:0];
  assign program_down = \port$1284$0 [31:16];
  assign program_left = \port$1284$0 [47:32];
  assign program_right = \port$1284$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_1_2 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1304$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$11  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1304$0 ;
  wire [63:0] \port$1304$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1304$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1304$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1304$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1304$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1304$0 [15:0];
  assign program_down = \port$1304$0 [31:16];
  assign program_left = \port$1304$0 [47:32];
  assign program_right = \port$1304$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_1_3 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1324$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$12  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1324$0 ;
  wire [63:0] \port$1324$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1324$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1324$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1324$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1324$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1324$0 [15:0];
  assign program_down = \port$1324$0 [31:16];
  assign program_left = \port$1324$0 [47:32];
  assign program_right = \port$1324$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_1_4 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1344$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$13  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1344$0 ;
  wire [63:0] \port$1344$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$13 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1344$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$13 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1344$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$13 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1344$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$13 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1344$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$13 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1344$0 [15:0];
  assign program_down = \port$1344$0 [31:16];
  assign program_left = \port$1344$0 [47:32];
  assign program_right = \port$1344$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_1_5 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1364$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$14  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1364$0 ;
  wire [63:0] \port$1364$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$14 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1364$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$14 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1364$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$14 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1364$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$14 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1364$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$14 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1364$0 [15:0];
  assign program_down = \port$1364$0 [31:16];
  assign program_left = \port$1364$0 [47:32];
  assign program_right = \port$1364$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_1_6 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1384$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$15  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1384$0 ;
  wire [63:0] \port$1384$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$15 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1384$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$15 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1384$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$15 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1384$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$15 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1384$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$15 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1384$0 [15:0];
  assign program_down = \port$1384$0 [31:16];
  assign program_left = \port$1384$0 [47:32];
  assign program_right = \port$1384$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_1_7 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1404$0 , in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$16  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1404$0 ;
  wire [63:0] \port$1404$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { 1'h0, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { 1'h0, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { 1'h0, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { 1'h0, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$16 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1404$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$16 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1404$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$16 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1404$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$16 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1404$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$16 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1404$0 [15:0];
  assign program_down = \port$1404$0 [31:16];
  assign program_left = \port$1404$0 [47:32];
  assign program_right = \port$1404$0 [63:48];
  assign in_concat = { 1'h0, in_left, in_down, in_up };
  assign in_right = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_2_0 (program_enable, run_rst, run_enable, clk, rst, in_up, out_reg, \port$1424$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$17  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1424$0 ;
  wire [63:0] \port$1424$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, 1'h0, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, 1'h0, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, 1'h0, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, 1'h0, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$17 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1424$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$17 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1424$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$17 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1424$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$17 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1424$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$17 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1424$0 [15:0];
  assign program_down = \port$1424$0 [31:16];
  assign program_left = \port$1424$0 [47:32];
  assign program_right = \port$1424$0 [63:48];
  assign in_concat = { in_right, 1'h0, in_down, in_up };
  assign in_left = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_2_1 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1444$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$18  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1444$0 ;
  wire [63:0] \port$1444$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$18 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1444$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$18 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1444$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$18 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1444$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$18 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1444$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$18 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1444$0 [15:0];
  assign program_down = \port$1444$0 [31:16];
  assign program_left = \port$1444$0 [47:32];
  assign program_right = \port$1444$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_2_2 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1464$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$19  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1464$0 ;
  wire [63:0] \port$1464$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$19 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1464$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$19 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1464$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$19 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1464$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$19 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1464$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$19 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1464$0 [15:0];
  assign program_down = \port$1464$0 [31:16];
  assign program_left = \port$1464$0 [47:32];
  assign program_right = \port$1464$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_2_3 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1484$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$20  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1484$0 ;
  wire [63:0] \port$1484$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$20 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1484$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$20 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1484$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$20 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1484$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$20 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1484$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$20 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1484$0 [15:0];
  assign program_down = \port$1484$0 [31:16];
  assign program_left = \port$1484$0 [47:32];
  assign program_right = \port$1484$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_2_4 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1504$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$21  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1504$0 ;
  wire [63:0] \port$1504$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$21 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1504$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$21 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1504$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$21 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1504$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$21 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1504$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$21 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1504$0 [15:0];
  assign program_down = \port$1504$0 [31:16];
  assign program_left = \port$1504$0 [47:32];
  assign program_right = \port$1504$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_2_5 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1524$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$22  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1524$0 ;
  wire [63:0] \port$1524$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$22 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1524$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$22 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1524$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$22 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1524$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$22 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1524$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$22 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1524$0 [15:0];
  assign program_down = \port$1524$0 [31:16];
  assign program_left = \port$1524$0 [47:32];
  assign program_right = \port$1524$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_2_6 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1544$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$23  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1544$0 ;
  wire [63:0] \port$1544$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$23 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1544$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$23 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1544$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$23 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1544$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$23 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1544$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$23 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1544$0 [15:0];
  assign program_down = \port$1544$0 [31:16];
  assign program_left = \port$1544$0 [47:32];
  assign program_right = \port$1544$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_2_7 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1564$0 , in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$24  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1564$0 ;
  wire [63:0] \port$1564$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { 1'h0, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { 1'h0, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { 1'h0, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { 1'h0, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$24 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1564$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$24 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1564$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$24 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1564$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$24 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1564$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$24 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1564$0 [15:0];
  assign program_down = \port$1564$0 [31:16];
  assign program_left = \port$1564$0 [47:32];
  assign program_right = \port$1564$0 [63:48];
  assign in_concat = { 1'h0, in_left, in_down, in_up };
  assign in_right = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_3_0 (program_enable, run_rst, run_enable, clk, rst, in_up, out_reg, \port$1584$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$25  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1584$0 ;
  wire [63:0] \port$1584$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, 1'h0, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, 1'h0, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, 1'h0, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, 1'h0, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$25 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1584$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$25 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1584$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$25 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1584$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$25 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1584$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$25 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1584$0 [15:0];
  assign program_down = \port$1584$0 [31:16];
  assign program_left = \port$1584$0 [47:32];
  assign program_right = \port$1584$0 [63:48];
  assign in_concat = { in_right, 1'h0, in_down, in_up };
  assign in_left = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_3_1 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1604$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$26  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1604$0 ;
  wire [63:0] \port$1604$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$26 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1604$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$26 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1604$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$26 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1604$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$26 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1604$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$26 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1604$0 [15:0];
  assign program_down = \port$1604$0 [31:16];
  assign program_left = \port$1604$0 [47:32];
  assign program_right = \port$1604$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_3_2 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1624$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$27  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1624$0 ;
  wire [63:0] \port$1624$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$27 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1624$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$27 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1624$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$27 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1624$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$27 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1624$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$27 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1624$0 [15:0];
  assign program_down = \port$1624$0 [31:16];
  assign program_left = \port$1624$0 [47:32];
  assign program_right = \port$1624$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_3_3 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1644$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$28  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1644$0 ;
  wire [63:0] \port$1644$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$28 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1644$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$28 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1644$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$28 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1644$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$28 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1644$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$28 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1644$0 [15:0];
  assign program_down = \port$1644$0 [31:16];
  assign program_left = \port$1644$0 [47:32];
  assign program_right = \port$1644$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_3_4 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1664$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$29  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1664$0 ;
  wire [63:0] \port$1664$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$29 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1664$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$29 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1664$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$29 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1664$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$29 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1664$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$29 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1664$0 [15:0];
  assign program_down = \port$1664$0 [31:16];
  assign program_left = \port$1664$0 [47:32];
  assign program_right = \port$1664$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_3_5 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1684$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$30  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1684$0 ;
  wire [63:0] \port$1684$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$30 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1684$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$30 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1684$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$30 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1684$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$30 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1684$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$30 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1684$0 [15:0];
  assign program_down = \port$1684$0 [31:16];
  assign program_left = \port$1684$0 [47:32];
  assign program_right = \port$1684$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_3_6 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1704$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$31  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1704$0 ;
  wire [63:0] \port$1704$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$31 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1704$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$31 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1704$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$31 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1704$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$31 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1704$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$31 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1704$0 [15:0];
  assign program_down = \port$1704$0 [31:16];
  assign program_left = \port$1704$0 [47:32];
  assign program_right = \port$1704$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_3_7 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1724$0 , in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$32  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1724$0 ;
  wire [63:0] \port$1724$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { 1'h0, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { 1'h0, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { 1'h0, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { 1'h0, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$32 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1724$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$32 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1724$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$32 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1724$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$32 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1724$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$32 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1724$0 [15:0];
  assign program_down = \port$1724$0 [31:16];
  assign program_left = \port$1724$0 [47:32];
  assign program_right = \port$1724$0 [63:48];
  assign in_concat = { 1'h0, in_left, in_down, in_up };
  assign in_right = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_4_0 (program_enable, run_rst, run_enable, clk, rst, in_up, out_reg, \port$1744$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$33  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1744$0 ;
  wire [63:0] \port$1744$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, 1'h0, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, 1'h0, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, 1'h0, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, 1'h0, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$33 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1744$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$33 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1744$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$33 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1744$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$33 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1744$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$33 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1744$0 [15:0];
  assign program_down = \port$1744$0 [31:16];
  assign program_left = \port$1744$0 [47:32];
  assign program_right = \port$1744$0 [63:48];
  assign in_concat = { in_right, 1'h0, in_down, in_up };
  assign in_left = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_4_1 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1764$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$34  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1764$0 ;
  wire [63:0] \port$1764$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$34 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1764$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$34 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1764$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$34 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1764$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$34 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1764$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$34 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1764$0 [15:0];
  assign program_down = \port$1764$0 [31:16];
  assign program_left = \port$1764$0 [47:32];
  assign program_right = \port$1764$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_4_2 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1784$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$35  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1784$0 ;
  wire [63:0] \port$1784$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$35 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1784$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$35 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1784$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$35 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1784$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$35 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1784$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$35 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1784$0 [15:0];
  assign program_down = \port$1784$0 [31:16];
  assign program_left = \port$1784$0 [47:32];
  assign program_right = \port$1784$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_4_3 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1804$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$36  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1804$0 ;
  wire [63:0] \port$1804$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$36 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1804$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$36 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1804$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$36 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1804$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$36 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1804$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$36 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1804$0 [15:0];
  assign program_down = \port$1804$0 [31:16];
  assign program_left = \port$1804$0 [47:32];
  assign program_right = \port$1804$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_4_4 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1824$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$37  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1824$0 ;
  wire [63:0] \port$1824$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$37 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1824$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$37 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1824$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$37 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1824$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$37 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1824$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$37 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1824$0 [15:0];
  assign program_down = \port$1824$0 [31:16];
  assign program_left = \port$1824$0 [47:32];
  assign program_right = \port$1824$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_4_5 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1844$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$38  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1844$0 ;
  wire [63:0] \port$1844$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$38 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1844$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$38 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1844$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$38 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1844$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$38 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1844$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$38 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1844$0 [15:0];
  assign program_down = \port$1844$0 [31:16];
  assign program_left = \port$1844$0 [47:32];
  assign program_right = \port$1844$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_4_6 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1864$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$39  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1864$0 ;
  wire [63:0] \port$1864$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$39 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1864$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$39 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1864$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$39 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1864$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$39 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1864$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$39 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1864$0 [15:0];
  assign program_down = \port$1864$0 [31:16];
  assign program_left = \port$1864$0 [47:32];
  assign program_right = \port$1864$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_4_7 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1884$0 , in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$40  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1884$0 ;
  wire [63:0] \port$1884$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { 1'h0, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { 1'h0, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { 1'h0, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { 1'h0, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$40 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1884$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$40 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1884$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$40 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1884$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$40 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1884$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$40 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1884$0 [15:0];
  assign program_down = \port$1884$0 [31:16];
  assign program_left = \port$1884$0 [47:32];
  assign program_right = \port$1884$0 [63:48];
  assign in_concat = { 1'h0, in_left, in_down, in_up };
  assign in_right = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_5_0 (program_enable, run_rst, run_enable, clk, rst, in_up, out_reg, \port$1904$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$41  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1904$0 ;
  wire [63:0] \port$1904$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, 1'h0, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, 1'h0, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, 1'h0, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, 1'h0, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$41 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1904$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$41 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1904$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$41 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1904$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$41 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1904$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$41 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1904$0 [15:0];
  assign program_down = \port$1904$0 [31:16];
  assign program_left = \port$1904$0 [47:32];
  assign program_right = \port$1904$0 [63:48];
  assign in_concat = { in_right, 1'h0, in_down, in_up };
  assign in_left = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_5_1 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1924$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$42  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1924$0 ;
  wire [63:0] \port$1924$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$42 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1924$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$42 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1924$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$42 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1924$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$42 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1924$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$42 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1924$0 [15:0];
  assign program_down = \port$1924$0 [31:16];
  assign program_left = \port$1924$0 [47:32];
  assign program_right = \port$1924$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_5_2 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1944$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$43  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1944$0 ;
  wire [63:0] \port$1944$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$43 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1944$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$43 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1944$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$43 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1944$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$43 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1944$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$43 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1944$0 [15:0];
  assign program_down = \port$1944$0 [31:16];
  assign program_left = \port$1944$0 [47:32];
  assign program_right = \port$1944$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_5_3 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1964$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$44  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1964$0 ;
  wire [63:0] \port$1964$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$44 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1964$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$44 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1964$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$44 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1964$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$44 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1964$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$44 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1964$0 [15:0];
  assign program_down = \port$1964$0 [31:16];
  assign program_left = \port$1964$0 [47:32];
  assign program_right = \port$1964$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_5_4 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$1984$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$45  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$1984$0 ;
  wire [63:0] \port$1984$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$45 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$1984$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$45 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$1984$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$45 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$1984$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$45 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$1984$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$45 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$1984$0 [15:0];
  assign program_down = \port$1984$0 [31:16];
  assign program_left = \port$1984$0 [47:32];
  assign program_right = \port$1984$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_5_5 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$2004$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$46  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2004$0 ;
  wire [63:0] \port$2004$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$46 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2004$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$46 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2004$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$46 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2004$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$46 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2004$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$46 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2004$0 [15:0];
  assign program_down = \port$2004$0 [31:16];
  assign program_left = \port$2004$0 [47:32];
  assign program_right = \port$2004$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_5_6 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$2024$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$47  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2024$0 ;
  wire [63:0] \port$2024$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$47 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2024$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$47 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2024$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$47 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2024$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$47 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2024$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$47 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2024$0 [15:0];
  assign program_down = \port$2024$0 [31:16];
  assign program_left = \port$2024$0 [47:32];
  assign program_right = \port$2024$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_5_7 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$2044$0 , in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$48  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2044$0 ;
  wire [63:0] \port$2044$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { 1'h0, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { 1'h0, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { 1'h0, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { 1'h0, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$48 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2044$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$48 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2044$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$48 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2044$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$48 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2044$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$48 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2044$0 [15:0];
  assign program_down = \port$2044$0 [31:16];
  assign program_left = \port$2044$0 [47:32];
  assign program_right = \port$2044$0 [63:48];
  assign in_concat = { 1'h0, in_left, in_down, in_up };
  assign in_right = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_6_0 (program_enable, run_rst, run_enable, clk, rst, in_up, out_reg, \port$2064$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$49  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2064$0 ;
  wire [63:0] \port$2064$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, 1'h0, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, 1'h0, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, 1'h0, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, 1'h0, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$49 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2064$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$49 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2064$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$49 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2064$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$49 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2064$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$49 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2064$0 [15:0];
  assign program_down = \port$2064$0 [31:16];
  assign program_left = \port$2064$0 [47:32];
  assign program_right = \port$2064$0 [63:48];
  assign in_concat = { in_right, 1'h0, in_down, in_up };
  assign in_left = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_6_1 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$2084$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$50  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2084$0 ;
  wire [63:0] \port$2084$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$50 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2084$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$50 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2084$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$50 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2084$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$50 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2084$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$50 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2084$0 [15:0];
  assign program_down = \port$2084$0 [31:16];
  assign program_left = \port$2084$0 [47:32];
  assign program_right = \port$2084$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_6_2 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$2104$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$51  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2104$0 ;
  wire [63:0] \port$2104$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$51 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2104$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$51 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2104$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$51 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2104$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$51 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2104$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$51 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2104$0 [15:0];
  assign program_down = \port$2104$0 [31:16];
  assign program_left = \port$2104$0 [47:32];
  assign program_right = \port$2104$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_6_3 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$2124$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$52  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2124$0 ;
  wire [63:0] \port$2124$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$52 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2124$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$52 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2124$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$52 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2124$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$52 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2124$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$52 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2124$0 [15:0];
  assign program_down = \port$2124$0 [31:16];
  assign program_left = \port$2124$0 [47:32];
  assign program_right = \port$2124$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_6_4 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$2144$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$53  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2144$0 ;
  wire [63:0] \port$2144$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$53 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2144$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$53 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2144$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$53 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2144$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$53 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2144$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$53 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2144$0 [15:0];
  assign program_down = \port$2144$0 [31:16];
  assign program_left = \port$2144$0 [47:32];
  assign program_right = \port$2144$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_6_5 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$2164$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$54  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2164$0 ;
  wire [63:0] \port$2164$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$54 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2164$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$54 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2164$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$54 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2164$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$54 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2164$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$54 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2164$0 [15:0];
  assign program_down = \port$2164$0 [31:16];
  assign program_left = \port$2164$0 [47:32];
  assign program_right = \port$2164$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_6_6 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$2184$0 , in_right, in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$55  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2184$0 ;
  wire [63:0] \port$2184$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$55 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2184$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$55 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2184$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$55 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2184$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$55 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2184$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$55 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2184$0 [15:0];
  assign program_down = \port$2184$0 [31:16];
  assign program_left = \port$2184$0 [47:32];
  assign program_right = \port$2184$0 [63:48];
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_6_7 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$2204$0 , in_down, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$56  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2204$0 ;
  wire [63:0] \port$2204$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { 1'h0, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { 1'h0, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { 1'h0, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { 1'h0, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$56 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2204$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$56 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2204$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$56 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2204$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$56 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2204$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$56 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2204$0 [15:0];
  assign program_down = \port$2204$0 [31:16];
  assign program_left = \port$2204$0 [47:32];
  assign program_right = \port$2204$0 [63:48];
  assign in_concat = { 1'h0, in_left, in_down, in_up };
  assign in_right = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_7_0 (program_enable, run_rst, run_enable, clk, rst, in_up, out_reg, \port$2224$0 , in_right, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$57  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2224$0 ;
  wire [63:0] \port$2224$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, 2'h0, in_up };
  assign f_down = program_down_reg >> { in_right, 2'h0, in_up };
  assign f_left = program_left_reg >> { in_right, 2'h0, in_up };
  assign f_right = program_right_reg >> { in_right, 2'h0, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$57 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2224$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$57 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2224$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$57 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2224$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$57 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2224$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$57 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2224$0 [15:0];
  assign program_down = \port$2224$0 [31:16];
  assign program_left = \port$2224$0 [47:32];
  assign program_right = \port$2224$0 [63:48];
  assign in_concat = { in_right, 2'h0, in_up };
  assign in_down = 1'h0;
  assign in_left = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_7_1 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$2244$0 , in_right, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$58  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2244$0 ;
  wire [63:0] \port$2244$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, 1'h0, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, 1'h0, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, 1'h0, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, 1'h0, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$58 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2244$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$58 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2244$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$58 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2244$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$58 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2244$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$58 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2244$0 [15:0];
  assign program_down = \port$2244$0 [31:16];
  assign program_left = \port$2244$0 [47:32];
  assign program_right = \port$2244$0 [63:48];
  assign in_concat = { in_right, in_left, 1'h0, in_up };
  assign in_down = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_7_2 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$2264$0 , in_right, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$59  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2264$0 ;
  wire [63:0] \port$2264$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, 1'h0, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, 1'h0, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, 1'h0, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, 1'h0, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$59 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2264$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$59 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2264$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$59 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2264$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$59 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2264$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$59 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2264$0 [15:0];
  assign program_down = \port$2264$0 [31:16];
  assign program_left = \port$2264$0 [47:32];
  assign program_right = \port$2264$0 [63:48];
  assign in_concat = { in_right, in_left, 1'h0, in_up };
  assign in_down = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_7_3 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$2284$0 , in_right, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$60  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2284$0 ;
  wire [63:0] \port$2284$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, 1'h0, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, 1'h0, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, 1'h0, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, 1'h0, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$60 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2284$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$60 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2284$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$60 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2284$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$60 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2284$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$60 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2284$0 [15:0];
  assign program_down = \port$2284$0 [31:16];
  assign program_left = \port$2284$0 [47:32];
  assign program_right = \port$2284$0 [63:48];
  assign in_concat = { in_right, in_left, 1'h0, in_up };
  assign in_down = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_7_4 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$2304$0 , in_right, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$61  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2304$0 ;
  wire [63:0] \port$2304$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, 1'h0, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, 1'h0, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, 1'h0, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, 1'h0, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$61 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2304$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$61 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2304$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$61 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2304$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$61 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2304$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$61 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2304$0 [15:0];
  assign program_down = \port$2304$0 [31:16];
  assign program_left = \port$2304$0 [47:32];
  assign program_right = \port$2304$0 [63:48];
  assign in_concat = { in_right, in_left, 1'h0, in_up };
  assign in_down = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_7_5 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$2324$0 , in_right, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$62  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2324$0 ;
  wire [63:0] \port$2324$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, 1'h0, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, 1'h0, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, 1'h0, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, 1'h0, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$62 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2324$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$62 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2324$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$62 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2324$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$62 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2324$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$62 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2324$0 [15:0];
  assign program_down = \port$2324$0 [31:16];
  assign program_left = \port$2324$0 [47:32];
  assign program_right = \port$2324$0 [63:48];
  assign in_concat = { in_right, in_left, 1'h0, in_up };
  assign in_down = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_7_6 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$2344$0 , in_right, program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$63  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2344$0 ;
  wire [63:0] \port$2344$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, 1'h0, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, 1'h0, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, 1'h0, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, 1'h0, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$63 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2344$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$63 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2344$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$63 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2344$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$63 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2344$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$63 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2344$0 [15:0];
  assign program_down = \port$2344$0 [31:16];
  assign program_left = \port$2344$0 [47:32];
  assign program_right = \port$2344$0 [63:48];
  assign in_concat = { in_right, in_left, 1'h0, in_up };
  assign in_down = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module \top.cell_7_7 (program_enable, run_rst, run_enable, clk, rst, in_up, in_left, out_reg, \port$2364$0 , program_rst);
  reg \$auto$verilog_backend.cc:2352:dump_module$64  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  output [3:0] out_reg;
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  wire out_up;
  input [63:0] \port$2364$0 ;
  wire [63:0] \port$2364$0 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { 1'h0, in_left, 1'h0, in_up };
  assign f_down = program_down_reg >> { 1'h0, in_left, 1'h0, in_up };
  assign f_left = program_left_reg >> { 1'h0, in_left, 1'h0, in_up };
  assign f_right = program_right_reg >> { 1'h0, in_left, 1'h0, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$64 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = \port$2364$0 [15:0];
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$64 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = \port$2364$0 [31:16];
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$64 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = \port$2364$0 [47:32];
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$64 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = \port$2364$0 [63:48];
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$64 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign program_up = \port$2364$0 [15:0];
  assign program_down = \port$2364$0 [31:16];
  assign program_left = \port$2364$0 [47:32];
  assign program_right = \port$2364$0 [63:48];
  assign in_concat = { 1'h0, in_left, 1'h0, in_up };
  assign in_down = 1'h0;
  assign in_right = 1'h0;
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_0_0 (enable, data_in, clk, rst, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$65  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$65 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_0_1 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$66  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$66 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_0_2 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$67  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$67 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_0_3 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$68  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$68 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_0_4 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$69  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$69 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_0_5 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$70  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$70 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_0_6 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$71  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$71 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_0_7 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$72  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$72 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_1_0 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$73  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$73 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_1_1 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$74  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$74 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_1_2 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$75  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$75 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_1_3 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$76  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$76 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_1_4 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$77  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$77 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_1_5 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$78  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$78 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_1_6 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$79  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$79 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_1_7 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$80  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$80 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_2_0 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$81  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$81 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_2_1 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$82  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$82 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_2_2 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$83  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$83 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_2_3 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$84  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$84 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_2_4 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$85  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$85 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_2_5 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$86  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$86 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_2_6 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$87  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$87 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_2_7 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$88  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$88 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_3_0 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$89  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$89 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_3_1 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$90  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$90 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_3_2 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$91  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$91 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_3_3 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$92  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$92 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_3_4 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$93  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$93 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_3_5 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$94  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$94 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_3_6 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$95  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$95 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_3_7 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$96  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$96 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_4_0 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$97  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$97 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_4_1 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$98  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$98 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_4_2 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$99  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$99 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_4_3 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$100  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$100 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_4_4 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$101  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$101 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_4_5 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$102  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$102 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_4_6 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$103  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$103 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_4_7 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$104  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$104 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_5_0 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$105  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$105 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_5_1 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$106  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$106 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_5_2 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$107  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$107 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_5_3 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$108  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$108 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_5_4 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$109  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$109 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_5_5 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$110  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$110 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_5_6 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$111  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$111 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_5_7 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$112  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$112 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_6_0 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$113  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$113 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_6_1 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$114  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$114 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_6_2 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$115  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$115 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_6_3 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$116  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$116 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_6_4 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$117  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$117 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_6_5 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$118  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$118 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_6_6 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$119  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$119 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_6_7 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$120  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$120 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_7_0 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$121  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$121 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_7_1 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$122  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$122 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_7_2 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$123  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$123 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_7_3 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$124  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$124 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_7_4 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$125  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$125 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_7_5 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$126  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$126 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_7_6 (enable, clk, rst, data, data_in, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$127  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$127 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:101" *)
(* generator = "Amaranth" *)
module \top.prog_7_7 (enable, clk, rst, data_in, data, \rst$2 );
  reg \$auto$verilog_backend.cc:2352:dump_module$128  = 0;
  reg [63:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  output [63:0] data;
  reg [63:0] data = 64'h0000000000000000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:94" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:95" *)
  wire data_out;
  (* init = 64'h0000000000000000 *)
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:96" *)
  wire [63:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:93" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:92" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:103" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$128 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 64'h0000000000000000;
    end else if (enable) begin
      \$1  = { data_in, data[63:1] };
    end
    if (rst) begin
      \$1  = 64'h0000000000000000;
    end
  end
  assign data_out = data[0];
  assign data_parallel = data;
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_0_0 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$129  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$129 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { 1'h0, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_in = 1'h0;
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_0_1 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$130  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$130 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_0_2 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$131  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$131 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_0_3 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$132  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$132 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_0_4 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$133  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$133 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_0_5 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$134  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$134 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_0_6 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$135  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$135 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_0_7 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$136  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$136 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_1_0 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$137  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$137 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_1_1 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$138  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$138 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_1_2 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$139  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$139 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_1_3 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$140  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$140 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_1_4 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$141  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$141 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_1_5 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$142  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$142 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_1_6 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$143  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$143 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_1_7 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$144  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$144 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_2_0 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$145  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$145 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_2_1 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$146  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$146 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_2_2 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$147  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$147 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_2_3 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$148  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$148 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_2_4 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$149  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$149 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_2_5 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$150  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$150 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_2_6 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$151  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$151 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_2_7 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$152  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$152 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_3_0 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$153  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$153 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_3_1 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$154  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$154 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_3_2 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$155  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$155 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_3_3 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$156  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$156 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_3_4 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$157  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$157 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_3_5 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$158  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$158 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_3_6 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$159  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$159 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_3_7 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$160  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$160 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_4_0 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$161  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$161 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_4_1 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$162  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$162 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_4_2 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$163  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$163 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_4_3 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$164  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$164 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_4_4 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$165  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$165 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_4_5 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$166  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$166 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_4_6 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$167  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$167 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_4_7 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$168  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$168 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_5_0 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$169  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$169 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_5_1 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$170  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$170 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_5_2 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$171  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$171 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_5_3 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$172  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$172 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_5_4 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$173  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$173 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_5_5 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$174  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$174 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_5_6 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$175  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$175 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_5_7 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$176  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$176 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_6_0 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$177  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$177 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_6_1 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$178  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$178 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_6_2 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$179  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$179 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_6_3 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$180  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$180 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_6_4 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$181  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$181 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_6_5 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$182  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$182 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_6_6 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$183  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$183 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_6_7 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$184  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$184 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_7_0 (\rst$2 , enable, clk, rst, data_parallel, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$185  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$185 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_7_1 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$186  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$186 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_7_2 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$187  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$187 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_7_3 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$188  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$188 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_7_4 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$189  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$189 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_7_5 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$190  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$190 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_7_6 (\rst$2 , enable, clk, rst, data_parallel, data_out, data_in, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$191  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$191 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule

(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:131" *)
(* generator = "Amaranth" *)
module \top.state_7_7 (\rst$2 , enable, clk, rst, data_in, data_parallel, data_out, data_copy);
  reg \$auto$verilog_backend.cc:2352:dump_module$192  = 0;
  reg [3:0] \$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  reg [3:0] data = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:126" *)
  input data_copy;
  wire data_copy;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:123" *)
  input data_in;
  wire data_in;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:124" *)
  output data_out;
  wire data_out;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:125" *)
  input [3:0] data_parallel;
  wire [3:0] data_parallel;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:122" *)
  input enable;
  wire enable;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:121" *)
  input \rst$2 ;
  wire \rst$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:133" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$192 ) begin end
    \$1  = data;
    if (\rst$2 ) begin
      \$1  = 4'h0;
    end else if (data_copy) begin
      \$1  = data_parallel;
    end else if (enable) begin
      \$1  = { data_in, data[3:1] };
    end
    if (rst) begin
      \$1  = 4'h0;
    end
  end
  assign data_out = data[0];
endmodule
