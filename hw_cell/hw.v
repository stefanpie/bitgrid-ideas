/* Generated by Yosys 0.43 (git sha1 ead4718e5, clang++ 15.0.0 -fPIC -Os) */

(* top =  1  *)
(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
(* generator = "Amaranth" *)
module top(in_down, in_left, in_right, run_rst, run_enable, program_up, program_down, program_left, program_right, program_rst, program_enable, clk, rst, out_up, out_down, out_left, out_right, in_up);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  reg [15:0] \$1 ;
  reg [15:0] \$2 ;
  reg [15:0] \$3 ;
  reg [15:0] \$4 ;
  reg [3:0] \$5 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  output out_down;
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  output out_left;
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  output out_right;
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  output out_up;
  wire out_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  input [15:0] program_down;
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  input [15:0] program_left;
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  input [15:0] program_right;
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  input [15:0] program_up;
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    program_up_reg <= \$1 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    program_down_reg <= \$2 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    program_left_reg <= \$3 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    program_right_reg <= \$4 ;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    out_reg <= \$5 ;
  assign f_up = program_up_reg >> { in_right, in_left, in_down, in_up };
  assign f_down = program_down_reg >> { in_right, in_left, in_down, in_up };
  assign f_left = program_left_reg >> { in_right, in_left, in_down, in_up };
  assign f_right = program_right_reg >> { in_right, in_left, in_down, in_up };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$1  = program_up_reg;
    if (program_rst) begin
      \$1  = 16'h0000;
    end else if (program_enable) begin
      \$1  = program_up;
    end
    if (rst) begin
      \$1  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$2  = program_down_reg;
    if (program_rst) begin
      \$2  = 16'h0000;
    end else if (program_enable) begin
      \$2  = program_down;
    end
    if (rst) begin
      \$2  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$3  = program_left_reg;
    if (program_rst) begin
      \$3  = 16'h0000;
    end else if (program_enable) begin
      \$3  = program_left;
    end
    if (rst) begin
      \$3  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$4  = program_right_reg;
    if (program_rst) begin
      \$4  = 16'h0000;
    end else if (program_enable) begin
      \$4  = program_right;
    end
    if (rst) begin
      \$4  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$5  = out_reg;
    if (run_rst) begin
      \$5  = 4'h0;
    end else if (run_enable) begin
      \$5  = { f_right, f_left, f_down, f_up };
    end
    if (rst) begin
      \$5  = 4'h0;
    end
  end
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_up = out_reg[0];
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
endmodule
