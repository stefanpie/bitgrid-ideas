/* Generated by Yosys 0.43 (git sha1 ead4718e5, clang++ 15.0.0 -fPIC -Os) */

(* top =  1  *)
(* generator = "Amaranth" *)
(* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:39" *)
module top(in_down, in_left, in_right, run_rst, run_enable, program_up, program_down, program_left, program_right, program_rst, program_enable, clk, rst, out_up, out_down, out_left, out_right, in_up);
  wire _00_;
  wire _01_;
  (* src = "hw.v:102.17-102.72" *)
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15" *)
  wire [15:0] _02_;
  (* src = "hw.v:103.19-103.76" *)
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15" *)
  wire [15:0] _03_;
  (* src = "hw.v:104.19-104.76" *)
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15" *)
  wire [15:0] _04_;
  (* src = "hw.v:105.20-105.78" *)
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15" *)
  wire [15:0] _05_;
  (* src = "hw.v:7.7-7.51" *)
  wire \$auto$verilog_backend.cc:2352:dump_module$1 ;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:45" *)
  wire f_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:46" *)
  wire f_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:47" *)
  wire f_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:44" *)
  wire f_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:42" *)
  wire [3:0] in_concat;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:18" *)
  input in_down;
  wire in_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:19" *)
  input in_left;
  wire in_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:20" *)
  input in_right;
  wire in_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:17" *)
  input in_up;
  wire in_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:23" *)
  output out_down;
  wire out_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:24" *)
  output out_left;
  wire out_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  reg [3:0] out_reg = 4'h0;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:25" *)
  output out_right;
  wire out_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:22" *)
  output out_up;
  wire out_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:31" *)
  input [15:0] program_down;
  wire [15:0] program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  reg [15:0] program_down_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:36" *)
  input program_enable;
  wire program_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:32" *)
  input [15:0] program_left;
  wire [15:0] program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  reg [15:0] program_left_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:33" *)
  input [15:0] program_right;
  wire [15:0] program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  reg [15:0] program_right_reg = 16'h0000;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:35" *)
  input program_rst;
  wire program_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:30" *)
  input [15:0] program_up;
  wire [15:0] program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  reg [15:0] program_up_reg = 16'h0000;
  (* src = "/Users/stefan/miniforge3/envs/ml-env/lib/python3.11/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:28" *)
  input run_enable;
  wire run_enable;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:27" *)
  input run_rst;
  wire run_rst;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:49" *)
  always @(posedge clk)
    if (_00_) program_up_reg <= 16'h0000;
    else if (program_enable) program_up_reg <= program_up;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:50" *)
  always @(posedge clk)
    if (_00_) program_down_reg <= 16'h0000;
    else if (program_enable) program_down_reg <= program_down;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:51" *)
  always @(posedge clk)
    if (_00_) program_left_reg <= 16'h0000;
    else if (program_enable) program_left_reg <= program_left;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:52" *)
  always @(posedge clk)
    if (_00_) program_right_reg <= 16'h0000;
    else if (program_enable) program_right_reg <= program_right;
  (* src = "/Users/stefan/Projects/bitgrid-ideas/./hw.py:41" *)
  always @(posedge clk)
    if (_01_) out_reg <= 4'h0;
    else if (run_enable) out_reg <= { f_right, f_left, f_down, f_up };
  assign _00_ = | { rst, program_rst };
  assign _01_ = | { run_rst, rst };
  assign { _02_[15:1], f_up } = program_up_reg >> (* src = "hw.v:102.17-102.72" *) { in_right, in_left, in_down, in_up };
  assign { _03_[15:1], f_down } = program_down_reg >> (* src = "hw.v:103.19-103.76" *) { in_right, in_left, in_down, in_up };
  assign { _04_[15:1], f_left } = program_left_reg >> (* src = "hw.v:104.19-104.76" *) { in_right, in_left, in_down, in_up };
  assign { _05_[15:1], f_right } = program_right_reg >> (* src = "hw.v:105.20-105.78" *) { in_right, in_left, in_down, in_up };
  assign _02_[0] = f_up;
  assign _03_[0] = f_down;
  assign _04_[0] = f_left;
  assign _05_[0] = f_right;
  assign \$auto$verilog_backend.cc:2352:dump_module$1  = 1'h0;
  assign in_concat = { in_right, in_left, in_down, in_up };
  assign out_down = out_reg[1];
  assign out_left = out_reg[2];
  assign out_right = out_reg[3];
  assign out_up = out_reg[0];
endmodule
